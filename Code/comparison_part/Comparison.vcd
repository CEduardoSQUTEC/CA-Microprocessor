$date
	Sat Jun 13 19:07:04 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Comparison_tb $end
$var wire 32 ! result [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$scope module DUT_Comparison $end
$var wire 32 $ a [31:0] $end
$var wire 32 % b [31:0] $end
$var wire 32 & result [31:0] $end
$var wire 32 ' comp [31:0] $end
$scope module sign $end
$var wire 32 ( a [31:0] $end
$var wire 1 ) bit_to_extend $end
$upscope $end
$scope module slt $end
$var wire 32 * a [31:0] $end
$var wire 32 + b [31:0] $end
$var wire 1 , f_cin $end
$var wire 32 - result [31:0] $end
$var wire 32 . carry [31:0] $end
$scope module add0 $end
$var wire 1 / a $end
$var wire 1 0 b $end
$var wire 1 , cin $end
$var wire 1 1 cout $end
$var wire 1 2 sum $end
$upscope $end
$scope module add1 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 cin $end
$var wire 1 6 cout $end
$var wire 1 7 sum $end
$upscope $end
$scope module add10 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : cin $end
$var wire 1 ; cout $end
$var wire 1 < sum $end
$upscope $end
$scope module add11 $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? cin $end
$var wire 1 @ cout $end
$var wire 1 A sum $end
$upscope $end
$scope module add12 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D cin $end
$var wire 1 E cout $end
$var wire 1 F sum $end
$upscope $end
$scope module add13 $end
$var wire 1 G a $end
$var wire 1 H b $end
$var wire 1 I cin $end
$var wire 1 J cout $end
$var wire 1 K sum $end
$upscope $end
$scope module add14 $end
$var wire 1 L a $end
$var wire 1 M b $end
$var wire 1 N cin $end
$var wire 1 O cout $end
$var wire 1 P sum $end
$upscope $end
$scope module add15 $end
$var wire 1 Q a $end
$var wire 1 R b $end
$var wire 1 S cin $end
$var wire 1 T cout $end
$var wire 1 U sum $end
$upscope $end
$scope module add16 $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 X cin $end
$var wire 1 Y cout $end
$var wire 1 Z sum $end
$upscope $end
$scope module add17 $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] cin $end
$var wire 1 ^ cout $end
$var wire 1 _ sum $end
$upscope $end
$scope module add18 $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b cin $end
$var wire 1 c cout $end
$var wire 1 d sum $end
$upscope $end
$scope module add19 $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g cin $end
$var wire 1 h cout $end
$var wire 1 i sum $end
$upscope $end
$scope module add2 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l cin $end
$var wire 1 m cout $end
$var wire 1 n sum $end
$upscope $end
$scope module add20 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q cin $end
$var wire 1 r cout $end
$var wire 1 s sum $end
$upscope $end
$scope module add21 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 v cin $end
$var wire 1 w cout $end
$var wire 1 x sum $end
$upscope $end
$scope module add22 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 { cin $end
$var wire 1 | cout $end
$var wire 1 } sum $end
$upscope $end
$scope module add23 $end
$var wire 1 ~ a $end
$var wire 1 !" b $end
$var wire 1 "" cin $end
$var wire 1 #" cout $end
$var wire 1 $" sum $end
$upscope $end
$scope module add24 $end
$var wire 1 %" a $end
$var wire 1 &" b $end
$var wire 1 '" cin $end
$var wire 1 (" cout $end
$var wire 1 )" sum $end
$upscope $end
$scope module add25 $end
$var wire 1 *" a $end
$var wire 1 +" b $end
$var wire 1 ," cin $end
$var wire 1 -" cout $end
$var wire 1 ." sum $end
$upscope $end
$scope module add26 $end
$var wire 1 /" a $end
$var wire 1 0" b $end
$var wire 1 1" cin $end
$var wire 1 2" cout $end
$var wire 1 3" sum $end
$upscope $end
$scope module add27 $end
$var wire 1 4" a $end
$var wire 1 5" b $end
$var wire 1 6" cin $end
$var wire 1 7" cout $end
$var wire 1 8" sum $end
$upscope $end
$scope module add28 $end
$var wire 1 9" a $end
$var wire 1 :" b $end
$var wire 1 ;" cin $end
$var wire 1 <" cout $end
$var wire 1 =" sum $end
$upscope $end
$scope module add29 $end
$var wire 1 >" a $end
$var wire 1 ?" b $end
$var wire 1 @" cin $end
$var wire 1 A" cout $end
$var wire 1 B" sum $end
$upscope $end
$scope module add3 $end
$var wire 1 C" a $end
$var wire 1 D" b $end
$var wire 1 E" cin $end
$var wire 1 F" cout $end
$var wire 1 G" sum $end
$upscope $end
$scope module add30 $end
$var wire 1 H" a $end
$var wire 1 I" b $end
$var wire 1 J" cin $end
$var wire 1 K" cout $end
$var wire 1 L" sum $end
$upscope $end
$scope module add31 $end
$var wire 1 M" a $end
$var wire 1 N" b $end
$var wire 1 O" cin $end
$var wire 1 P" cout $end
$var wire 1 Q" sum $end
$upscope $end
$scope module add4 $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 T" cin $end
$var wire 1 U" cout $end
$var wire 1 V" sum $end
$upscope $end
$scope module add5 $end
$var wire 1 W" a $end
$var wire 1 X" b $end
$var wire 1 Y" cin $end
$var wire 1 Z" cout $end
$var wire 1 [" sum $end
$upscope $end
$scope module add6 $end
$var wire 1 \" a $end
$var wire 1 ]" b $end
$var wire 1 ^" cin $end
$var wire 1 _" cout $end
$var wire 1 `" sum $end
$upscope $end
$scope module add7 $end
$var wire 1 a" a $end
$var wire 1 b" b $end
$var wire 1 c" cin $end
$var wire 1 d" cout $end
$var wire 1 e" sum $end
$upscope $end
$scope module add8 $end
$var wire 1 f" a $end
$var wire 1 g" b $end
$var wire 1 h" cin $end
$var wire 1 i" cout $end
$var wire 1 j" sum $end
$upscope $end
$scope module add9 $end
$var wire 1 k" a $end
$var wire 1 l" b $end
$var wire 1 m" cin $end
$var wire 1 n" cout $end
$var wire 1 o" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1o"
0n"
0m"
1l"
0k"
1j"
0i"
0h"
1g"
0f"
1e"
0d"
0c"
1b"
0a"
1`"
0_"
0^"
1]"
0\"
1["
0Z"
0Y"
1X"
0W"
1V"
0U"
0T"
1S"
0R"
1Q"
0P"
0O"
1N"
0M"
1L"
0K"
0J"
1I"
0H"
1G"
0F"
0E"
1D"
0C"
1B"
0A"
0@"
1?"
0>"
1="
0<"
0;"
1:"
09"
18"
07"
06"
15"
04"
13"
02"
01"
10"
0/"
1."
0-"
0,"
1+"
0*"
1)"
0("
0'"
1&"
0%"
1$"
0#"
0""
1!"
0~
1}
0|
0{
1z
0y
1x
0w
0v
1u
0t
1s
0r
0q
1p
0o
1n
0m
0l
1k
0j
1i
0h
0g
1f
0e
1d
0c
0b
1a
0`
1_
0^
0]
1\
0[
1Z
0Y
0X
1W
0V
1U
0T
0S
1R
0Q
1P
0O
0N
1M
0L
1K
0J
0I
1H
0G
1F
0E
0D
1C
0B
1A
0@
0?
1>
0=
1<
0;
0:
19
08
17
06
05
14
03
12
01
00
0/
b0 .
b11111111111111111111111111111111 -
1,
b11111111111111111111111111111110 +
b0 *
1)
b11111111111111111111111111111111 (
b11111111111111111111111111111111 '
b11111111111111111111111111111111 &
b1 %
b0 $
b1 #
b0 "
b11111111111111111111111111111111 !
$end
#1
1P"
b0 !
b0 &
b0 (
0)
0Q"
1O"
1K"
0L"
1J"
1A"
0B"
1@"
1<"
0="
1;"
17"
08"
16"
12"
03"
11"
1-"
0."
1,"
1("
0)"
1'"
1#"
0$"
1""
1|
0}
1{
1w
0x
1v
1r
0s
1q
1h
0i
1g
1c
0d
1b
1^
0_
1]
1Y
0Z
1X
1T
0U
1S
1O
0P
1N
1J
0K
1I
1E
0F
1D
1@
0A
1?
1;
0<
1:
1n"
0o"
1m"
1i"
0j"
1h"
1d"
0e"
1c"
1_"
0`"
1^"
1Z"
0["
1Y"
1U"
0V"
1T"
1F"
0G"
1E"
1m
0n
1l
16
07
15
b11111111111111111111111111111111 .
11
b0 '
b0 -
02
1/
b1 "
b1 $
b1 *
#2
0P"
b11111111111111111111111111111111 !
b11111111111111111111111111111111 &
b11111111111111111111111111111111 (
1)
1Q"
0O"
0K"
1L"
0J"
0A"
1B"
0@"
0<"
1="
0;"
07"
18"
06"
02"
13"
01"
0-"
1."
0,"
0("
1)"
0'"
0#"
1$"
0""
0|
1}
0{
0w
1x
0v
0r
1s
0q
0h
1i
0g
0c
1d
0b
0^
1_
0]
0Y
1Z
0X
0T
1U
0S
0O
1P
0N
0J
1K
0I
0E
1F
0D
0@
1A
0?
0;
1<
0:
0n"
1o"
0m"
0i"
1j"
0h"
0d"
1e"
0c"
0_"
1`"
0^"
0Z"
1["
0Y"
0U"
1V"
0T"
0F"
1G"
0E"
0m
1n
0l
b1 .
06
12
b11111111111111111111111111111111 '
b11111111111111111111111111111111 -
17
10
04
b11111111111111111111111111111101 +
b10 #
b10 %
#3
