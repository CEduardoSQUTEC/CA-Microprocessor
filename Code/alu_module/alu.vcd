$date
	Thu Jun 11 20:11:19 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module _nor $end
$var wire 32 ! a [31:0] $end
$var wire 32 " b [31:0] $end
$var wire 32 # result [31:0] $end
$upscope $end
$scope module alu_tb $end
$var wire 1 $ flag $end
$var wire 32 % result [31:0] $end
$var reg 32 & a [31:0] $end
$var reg 4 ' aluop [3:0] $end
$var reg 32 ( b [31:0] $end
$scope module DUT_alu $end
$var wire 4 ) ALUop [3:0] $end
$var wire 32 * a [31:0] $end
$var wire 32 + b [31:0] $end
$var wire 1 $ flag $end
$var wire 32 , result [31:0] $end
$var wire 32 - result_arithmetic [31:0] $end
$var wire 32 . result_arithmetic_logic [31:0] $end
$var wire 32 / result_comparison [31:0] $end
$var wire 32 0 result_logic [31:0] $end
$scope module arithmethic_op $end
$var wire 4 1 ALUop [3:0] $end
$var wire 32 2 a [31:0] $end
$var wire 32 3 b [31:0] $end
$var wire 1 $ flag $end
$var wire 1 4 op_sign $end
$var wire 32 5 wire_sub [31:0] $end
$var wire 32 6 wire_sum [31:0] $end
$var reg 32 7 result [31:0] $end
$scope module sum $end
$var wire 32 8 a [31:0] $end
$var wire 32 9 b [31:0] $end
$var wire 32 : carry [31:0] $end
$var wire 1 4 f_cin $end
$var wire 32 ; result [31:0] $end
$scope module add0 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 4 cin $end
$var wire 1 > cout $end
$var wire 1 ? sum $end
$upscope $end
$scope module add1 $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 B cin $end
$var wire 1 C cout $end
$var wire 1 D sum $end
$upscope $end
$scope module add2 $end
$var wire 1 E a $end
$var wire 1 F b $end
$var wire 1 G cin $end
$var wire 1 H cout $end
$var wire 1 I sum $end
$upscope $end
$scope module add3 $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 L cin $end
$var wire 1 M cout $end
$var wire 1 N sum $end
$upscope $end
$scope module add4 $end
$var wire 1 O a $end
$var wire 1 P b $end
$var wire 1 Q cin $end
$var wire 1 R cout $end
$var wire 1 S sum $end
$upscope $end
$scope module add5 $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 V cin $end
$var wire 1 W cout $end
$var wire 1 X sum $end
$upscope $end
$scope module add6 $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 [ cin $end
$var wire 1 \ cout $end
$var wire 1 ] sum $end
$upscope $end
$scope module add8 $end
$var wire 1 ^ a $end
$var wire 1 _ b $end
$var wire 1 ` cin $end
$var wire 1 a cout $end
$var wire 1 b sum $end
$upscope $end
$scope module add7 $end
$var wire 1 c a $end
$var wire 1 d b $end
$var wire 1 e cin $end
$var wire 1 f cout $end
$var wire 1 g sum $end
$upscope $end
$scope module add9 $end
$var wire 1 h a $end
$var wire 1 i b $end
$var wire 1 j cin $end
$var wire 1 k cout $end
$var wire 1 l sum $end
$upscope $end
$scope module add10 $end
$var wire 1 m a $end
$var wire 1 n b $end
$var wire 1 o cin $end
$var wire 1 p cout $end
$var wire 1 q sum $end
$upscope $end
$scope module add11 $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 t cin $end
$var wire 1 u cout $end
$var wire 1 v sum $end
$upscope $end
$scope module add12 $end
$var wire 1 w a $end
$var wire 1 x b $end
$var wire 1 y cin $end
$var wire 1 z cout $end
$var wire 1 { sum $end
$upscope $end
$scope module add13 $end
$var wire 1 | a $end
$var wire 1 } b $end
$var wire 1 ~ cin $end
$var wire 1 !" cout $end
$var wire 1 "" sum $end
$upscope $end
$scope module add14 $end
$var wire 1 #" a $end
$var wire 1 $" b $end
$var wire 1 %" cin $end
$var wire 1 &" cout $end
$var wire 1 '" sum $end
$upscope $end
$scope module add15 $end
$var wire 1 (" a $end
$var wire 1 )" b $end
$var wire 1 *" cin $end
$var wire 1 +" cout $end
$var wire 1 ," sum $end
$upscope $end
$scope module add16 $end
$var wire 1 -" a $end
$var wire 1 ." b $end
$var wire 1 /" cin $end
$var wire 1 0" cout $end
$var wire 1 1" sum $end
$upscope $end
$scope module add17 $end
$var wire 1 2" a $end
$var wire 1 3" b $end
$var wire 1 4" cin $end
$var wire 1 5" cout $end
$var wire 1 6" sum $end
$upscope $end
$scope module add18 $end
$var wire 1 7" a $end
$var wire 1 8" b $end
$var wire 1 9" cin $end
$var wire 1 :" cout $end
$var wire 1 ;" sum $end
$upscope $end
$scope module add19 $end
$var wire 1 <" a $end
$var wire 1 =" b $end
$var wire 1 >" cin $end
$var wire 1 ?" cout $end
$var wire 1 @" sum $end
$upscope $end
$scope module add20 $end
$var wire 1 A" a $end
$var wire 1 B" b $end
$var wire 1 C" cin $end
$var wire 1 D" cout $end
$var wire 1 E" sum $end
$upscope $end
$scope module add21 $end
$var wire 1 F" a $end
$var wire 1 G" b $end
$var wire 1 H" cin $end
$var wire 1 I" cout $end
$var wire 1 J" sum $end
$upscope $end
$scope module add22 $end
$var wire 1 K" a $end
$var wire 1 L" b $end
$var wire 1 M" cin $end
$var wire 1 N" cout $end
$var wire 1 O" sum $end
$upscope $end
$scope module add23 $end
$var wire 1 P" a $end
$var wire 1 Q" b $end
$var wire 1 R" cin $end
$var wire 1 S" cout $end
$var wire 1 T" sum $end
$upscope $end
$scope module add24 $end
$var wire 1 U" a $end
$var wire 1 V" b $end
$var wire 1 W" cin $end
$var wire 1 X" cout $end
$var wire 1 Y" sum $end
$upscope $end
$scope module add25 $end
$var wire 1 Z" a $end
$var wire 1 [" b $end
$var wire 1 \" cin $end
$var wire 1 ]" cout $end
$var wire 1 ^" sum $end
$upscope $end
$scope module add26 $end
$var wire 1 _" a $end
$var wire 1 `" b $end
$var wire 1 a" cin $end
$var wire 1 b" cout $end
$var wire 1 c" sum $end
$upscope $end
$scope module add27 $end
$var wire 1 d" a $end
$var wire 1 e" b $end
$var wire 1 f" cin $end
$var wire 1 g" cout $end
$var wire 1 h" sum $end
$upscope $end
$scope module add28 $end
$var wire 1 i" a $end
$var wire 1 j" b $end
$var wire 1 k" cin $end
$var wire 1 l" cout $end
$var wire 1 m" sum $end
$upscope $end
$scope module add29 $end
$var wire 1 n" a $end
$var wire 1 o" b $end
$var wire 1 p" cin $end
$var wire 1 q" cout $end
$var wire 1 r" sum $end
$upscope $end
$scope module add30 $end
$var wire 1 s" a $end
$var wire 1 t" b $end
$var wire 1 u" cin $end
$var wire 1 v" cout $end
$var wire 1 w" sum $end
$upscope $end
$scope module add31 $end
$var wire 1 x" a $end
$var wire 1 y" b $end
$var wire 1 z" cin $end
$var wire 1 {" cout $end
$var wire 1 |" sum $end
$upscope $end
$upscope $end
$scope module sub $end
$var wire 32 }" a [31:0] $end
$var wire 32 ~" b [31:0] $end
$var wire 32 !# carry [31:0] $end
$var wire 1 4 f_cin $end
$var wire 32 "# result [31:0] $end
$scope module add0 $end
$var wire 1 ## a $end
$var wire 1 $# b $end
$var wire 1 4 cin $end
$var wire 1 %# cout $end
$var wire 1 &# sum $end
$upscope $end
$scope module add1 $end
$var wire 1 '# a $end
$var wire 1 (# b $end
$var wire 1 )# cin $end
$var wire 1 *# cout $end
$var wire 1 +# sum $end
$upscope $end
$scope module add2 $end
$var wire 1 ,# a $end
$var wire 1 -# b $end
$var wire 1 .# cin $end
$var wire 1 /# cout $end
$var wire 1 0# sum $end
$upscope $end
$scope module add3 $end
$var wire 1 1# a $end
$var wire 1 2# b $end
$var wire 1 3# cin $end
$var wire 1 4# cout $end
$var wire 1 5# sum $end
$upscope $end
$scope module add4 $end
$var wire 1 6# a $end
$var wire 1 7# b $end
$var wire 1 8# cin $end
$var wire 1 9# cout $end
$var wire 1 :# sum $end
$upscope $end
$scope module add5 $end
$var wire 1 ;# a $end
$var wire 1 <# b $end
$var wire 1 =# cin $end
$var wire 1 ># cout $end
$var wire 1 ?# sum $end
$upscope $end
$scope module add6 $end
$var wire 1 @# a $end
$var wire 1 A# b $end
$var wire 1 B# cin $end
$var wire 1 C# cout $end
$var wire 1 D# sum $end
$upscope $end
$scope module add8 $end
$var wire 1 E# a $end
$var wire 1 F# b $end
$var wire 1 G# cin $end
$var wire 1 H# cout $end
$var wire 1 I# sum $end
$upscope $end
$scope module add7 $end
$var wire 1 J# a $end
$var wire 1 K# b $end
$var wire 1 L# cin $end
$var wire 1 M# cout $end
$var wire 1 N# sum $end
$upscope $end
$scope module add9 $end
$var wire 1 O# a $end
$var wire 1 P# b $end
$var wire 1 Q# cin $end
$var wire 1 R# cout $end
$var wire 1 S# sum $end
$upscope $end
$scope module add10 $end
$var wire 1 T# a $end
$var wire 1 U# b $end
$var wire 1 V# cin $end
$var wire 1 W# cout $end
$var wire 1 X# sum $end
$upscope $end
$scope module add11 $end
$var wire 1 Y# a $end
$var wire 1 Z# b $end
$var wire 1 [# cin $end
$var wire 1 \# cout $end
$var wire 1 ]# sum $end
$upscope $end
$scope module add12 $end
$var wire 1 ^# a $end
$var wire 1 _# b $end
$var wire 1 `# cin $end
$var wire 1 a# cout $end
$var wire 1 b# sum $end
$upscope $end
$scope module add13 $end
$var wire 1 c# a $end
$var wire 1 d# b $end
$var wire 1 e# cin $end
$var wire 1 f# cout $end
$var wire 1 g# sum $end
$upscope $end
$scope module add14 $end
$var wire 1 h# a $end
$var wire 1 i# b $end
$var wire 1 j# cin $end
$var wire 1 k# cout $end
$var wire 1 l# sum $end
$upscope $end
$scope module add15 $end
$var wire 1 m# a $end
$var wire 1 n# b $end
$var wire 1 o# cin $end
$var wire 1 p# cout $end
$var wire 1 q# sum $end
$upscope $end
$scope module add16 $end
$var wire 1 r# a $end
$var wire 1 s# b $end
$var wire 1 t# cin $end
$var wire 1 u# cout $end
$var wire 1 v# sum $end
$upscope $end
$scope module add17 $end
$var wire 1 w# a $end
$var wire 1 x# b $end
$var wire 1 y# cin $end
$var wire 1 z# cout $end
$var wire 1 {# sum $end
$upscope $end
$scope module add18 $end
$var wire 1 |# a $end
$var wire 1 }# b $end
$var wire 1 ~# cin $end
$var wire 1 !$ cout $end
$var wire 1 "$ sum $end
$upscope $end
$scope module add19 $end
$var wire 1 #$ a $end
$var wire 1 $$ b $end
$var wire 1 %$ cin $end
$var wire 1 &$ cout $end
$var wire 1 '$ sum $end
$upscope $end
$scope module add20 $end
$var wire 1 ($ a $end
$var wire 1 )$ b $end
$var wire 1 *$ cin $end
$var wire 1 +$ cout $end
$var wire 1 ,$ sum $end
$upscope $end
$scope module add21 $end
$var wire 1 -$ a $end
$var wire 1 .$ b $end
$var wire 1 /$ cin $end
$var wire 1 0$ cout $end
$var wire 1 1$ sum $end
$upscope $end
$scope module add22 $end
$var wire 1 2$ a $end
$var wire 1 3$ b $end
$var wire 1 4$ cin $end
$var wire 1 5$ cout $end
$var wire 1 6$ sum $end
$upscope $end
$scope module add23 $end
$var wire 1 7$ a $end
$var wire 1 8$ b $end
$var wire 1 9$ cin $end
$var wire 1 :$ cout $end
$var wire 1 ;$ sum $end
$upscope $end
$scope module add24 $end
$var wire 1 <$ a $end
$var wire 1 =$ b $end
$var wire 1 >$ cin $end
$var wire 1 ?$ cout $end
$var wire 1 @$ sum $end
$upscope $end
$scope module add25 $end
$var wire 1 A$ a $end
$var wire 1 B$ b $end
$var wire 1 C$ cin $end
$var wire 1 D$ cout $end
$var wire 1 E$ sum $end
$upscope $end
$scope module add26 $end
$var wire 1 F$ a $end
$var wire 1 G$ b $end
$var wire 1 H$ cin $end
$var wire 1 I$ cout $end
$var wire 1 J$ sum $end
$upscope $end
$scope module add27 $end
$var wire 1 K$ a $end
$var wire 1 L$ b $end
$var wire 1 M$ cin $end
$var wire 1 N$ cout $end
$var wire 1 O$ sum $end
$upscope $end
$scope module add28 $end
$var wire 1 P$ a $end
$var wire 1 Q$ b $end
$var wire 1 R$ cin $end
$var wire 1 S$ cout $end
$var wire 1 T$ sum $end
$upscope $end
$scope module add29 $end
$var wire 1 U$ a $end
$var wire 1 V$ b $end
$var wire 1 W$ cin $end
$var wire 1 X$ cout $end
$var wire 1 Y$ sum $end
$upscope $end
$scope module add30 $end
$var wire 1 Z$ a $end
$var wire 1 [$ b $end
$var wire 1 \$ cin $end
$var wire 1 ]$ cout $end
$var wire 1 ^$ sum $end
$upscope $end
$scope module add31 $end
$var wire 1 _$ a $end
$var wire 1 `$ b $end
$var wire 1 a$ cin $end
$var wire 1 b$ cout $end
$var wire 1 c$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module logic_op $end
$var wire 4 d$ ALUop [3:0] $end
$var wire 32 e$ a [31:0] $end
$var wire 32 f$ and_w [31:0] $end
$var wire 32 g$ b [31:0] $end
$var wire 32 h$ or_w [31:0] $end
$var wire 32 i$ xor_w [31:0] $end
$var reg 32 j$ result [31:0] $end
$scope module and_32 $end
$var wire 32 k$ a [31:0] $end
$var wire 32 l$ b [31:0] $end
$var wire 32 m$ result [31:0] $end
$upscope $end
$scope module or_32 $end
$var wire 32 n$ a [31:0] $end
$var wire 32 o$ b [31:0] $end
$var wire 32 p$ result [31:0] $end
$upscope $end
$scope module xor_32 $end
$var wire 32 q$ a [31:0] $end
$var wire 32 r$ b [31:0] $end
$var wire 32 s$ result [31:0] $end
$upscope $end
$upscope $end
$scope module comparison_op $end
$var wire 32 t$ a [31:0] $end
$var wire 32 u$ b [31:0] $end
$var wire 32 v$ comp [31:0] $end
$var wire 32 w$ result [31:0] $end
$scope module slt $end
$var wire 32 x$ a [31:0] $end
$var wire 32 y$ b [31:0] $end
$var wire 32 z$ carry [31:0] $end
$var wire 1 {$ f_cin $end
$var wire 32 |$ result [31:0] $end
$scope module add0 $end
$var wire 1 }$ a $end
$var wire 1 ~$ b $end
$var wire 1 {$ cin $end
$var wire 1 !% cout $end
$var wire 1 "% sum $end
$upscope $end
$scope module add1 $end
$var wire 1 #% a $end
$var wire 1 $% b $end
$var wire 1 %% cin $end
$var wire 1 &% cout $end
$var wire 1 '% sum $end
$upscope $end
$scope module add2 $end
$var wire 1 (% a $end
$var wire 1 )% b $end
$var wire 1 *% cin $end
$var wire 1 +% cout $end
$var wire 1 ,% sum $end
$upscope $end
$scope module add3 $end
$var wire 1 -% a $end
$var wire 1 .% b $end
$var wire 1 /% cin $end
$var wire 1 0% cout $end
$var wire 1 1% sum $end
$upscope $end
$scope module add4 $end
$var wire 1 2% a $end
$var wire 1 3% b $end
$var wire 1 4% cin $end
$var wire 1 5% cout $end
$var wire 1 6% sum $end
$upscope $end
$scope module add5 $end
$var wire 1 7% a $end
$var wire 1 8% b $end
$var wire 1 9% cin $end
$var wire 1 :% cout $end
$var wire 1 ;% sum $end
$upscope $end
$scope module add6 $end
$var wire 1 <% a $end
$var wire 1 =% b $end
$var wire 1 >% cin $end
$var wire 1 ?% cout $end
$var wire 1 @% sum $end
$upscope $end
$scope module add8 $end
$var wire 1 A% a $end
$var wire 1 B% b $end
$var wire 1 C% cin $end
$var wire 1 D% cout $end
$var wire 1 E% sum $end
$upscope $end
$scope module add7 $end
$var wire 1 F% a $end
$var wire 1 G% b $end
$var wire 1 H% cin $end
$var wire 1 I% cout $end
$var wire 1 J% sum $end
$upscope $end
$scope module add9 $end
$var wire 1 K% a $end
$var wire 1 L% b $end
$var wire 1 M% cin $end
$var wire 1 N% cout $end
$var wire 1 O% sum $end
$upscope $end
$scope module add10 $end
$var wire 1 P% a $end
$var wire 1 Q% b $end
$var wire 1 R% cin $end
$var wire 1 S% cout $end
$var wire 1 T% sum $end
$upscope $end
$scope module add11 $end
$var wire 1 U% a $end
$var wire 1 V% b $end
$var wire 1 W% cin $end
$var wire 1 X% cout $end
$var wire 1 Y% sum $end
$upscope $end
$scope module add12 $end
$var wire 1 Z% a $end
$var wire 1 [% b $end
$var wire 1 \% cin $end
$var wire 1 ]% cout $end
$var wire 1 ^% sum $end
$upscope $end
$scope module add13 $end
$var wire 1 _% a $end
$var wire 1 `% b $end
$var wire 1 a% cin $end
$var wire 1 b% cout $end
$var wire 1 c% sum $end
$upscope $end
$scope module add14 $end
$var wire 1 d% a $end
$var wire 1 e% b $end
$var wire 1 f% cin $end
$var wire 1 g% cout $end
$var wire 1 h% sum $end
$upscope $end
$scope module add15 $end
$var wire 1 i% a $end
$var wire 1 j% b $end
$var wire 1 k% cin $end
$var wire 1 l% cout $end
$var wire 1 m% sum $end
$upscope $end
$scope module add16 $end
$var wire 1 n% a $end
$var wire 1 o% b $end
$var wire 1 p% cin $end
$var wire 1 q% cout $end
$var wire 1 r% sum $end
$upscope $end
$scope module add17 $end
$var wire 1 s% a $end
$var wire 1 t% b $end
$var wire 1 u% cin $end
$var wire 1 v% cout $end
$var wire 1 w% sum $end
$upscope $end
$scope module add18 $end
$var wire 1 x% a $end
$var wire 1 y% b $end
$var wire 1 z% cin $end
$var wire 1 {% cout $end
$var wire 1 |% sum $end
$upscope $end
$scope module add19 $end
$var wire 1 }% a $end
$var wire 1 ~% b $end
$var wire 1 !& cin $end
$var wire 1 "& cout $end
$var wire 1 #& sum $end
$upscope $end
$scope module add20 $end
$var wire 1 $& a $end
$var wire 1 %& b $end
$var wire 1 && cin $end
$var wire 1 '& cout $end
$var wire 1 (& sum $end
$upscope $end
$scope module add21 $end
$var wire 1 )& a $end
$var wire 1 *& b $end
$var wire 1 +& cin $end
$var wire 1 ,& cout $end
$var wire 1 -& sum $end
$upscope $end
$scope module add22 $end
$var wire 1 .& a $end
$var wire 1 /& b $end
$var wire 1 0& cin $end
$var wire 1 1& cout $end
$var wire 1 2& sum $end
$upscope $end
$scope module add23 $end
$var wire 1 3& a $end
$var wire 1 4& b $end
$var wire 1 5& cin $end
$var wire 1 6& cout $end
$var wire 1 7& sum $end
$upscope $end
$scope module add24 $end
$var wire 1 8& a $end
$var wire 1 9& b $end
$var wire 1 :& cin $end
$var wire 1 ;& cout $end
$var wire 1 <& sum $end
$upscope $end
$scope module add25 $end
$var wire 1 =& a $end
$var wire 1 >& b $end
$var wire 1 ?& cin $end
$var wire 1 @& cout $end
$var wire 1 A& sum $end
$upscope $end
$scope module add26 $end
$var wire 1 B& a $end
$var wire 1 C& b $end
$var wire 1 D& cin $end
$var wire 1 E& cout $end
$var wire 1 F& sum $end
$upscope $end
$scope module add27 $end
$var wire 1 G& a $end
$var wire 1 H& b $end
$var wire 1 I& cin $end
$var wire 1 J& cout $end
$var wire 1 K& sum $end
$upscope $end
$scope module add28 $end
$var wire 1 L& a $end
$var wire 1 M& b $end
$var wire 1 N& cin $end
$var wire 1 O& cout $end
$var wire 1 P& sum $end
$upscope $end
$scope module add29 $end
$var wire 1 Q& a $end
$var wire 1 R& b $end
$var wire 1 S& cin $end
$var wire 1 T& cout $end
$var wire 1 U& sum $end
$upscope $end
$scope module add30 $end
$var wire 1 V& a $end
$var wire 1 W& b $end
$var wire 1 X& cin $end
$var wire 1 Y& cout $end
$var wire 1 Z& sum $end
$upscope $end
$scope module add31 $end
$var wire 1 [& a $end
$var wire 1 \& b $end
$var wire 1 ]& cin $end
$var wire 1 ^& cout $end
$var wire 1 _& sum $end
$upscope $end
$upscope $end
$scope module sign $end
$var wire 32 `& a [31:0] $end
$var wire 1 a& bit_to_extend $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0a&
b0 `&
0_&
1^&
1]&
1\&
0[&
0Z&
1Y&
1X&
1W&
0V&
0U&
1T&
1S&
1R&
0Q&
0P&
1O&
1N&
1M&
0L&
0K&
1J&
1I&
1H&
0G&
0F&
1E&
1D&
1C&
0B&
0A&
1@&
1?&
1>&
0=&
0<&
1;&
1:&
19&
08&
07&
16&
15&
14&
03&
02&
11&
10&
1/&
0.&
0-&
1,&
1+&
1*&
0)&
0(&
1'&
1&&
1%&
0$&
0#&
1"&
1!&
1~%
0}%
0|%
1{%
1z%
1y%
0x%
0w%
1v%
1u%
1t%
0s%
0r%
1q%
1p%
1o%
0n%
0m%
1l%
1k%
1j%
0i%
0h%
1g%
1f%
1e%
0d%
0c%
1b%
0a%
1`%
1_%
0^%
0]%
0\%
0[%
0Z%
1Y%
0X%
0W%
1V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
1,%
0+%
0*%
1)%
0(%
0'%
0&%
0%%
0$%
0#%
1"%
0!%
0~$
0}$
b100000000101 |$
1{$
b11111111111111111110000000000000 z$
b11111111111111111110100000000100 y$
b10000000000000 x$
b0 w$
b100000000101 v$
b1011111111011 u$
b10000000000000 t$
b11011111111011 s$
b1011111111011 r$
b10000000000000 q$
b1 p$
b1011111111011 o$
b10000000000000 n$
b1 m$
b1011111111011 l$
b10000000000000 k$
b1 j$
b11011111111011 i$
b1 h$
b1011111111011 g$
b1 f$
b10000000000000 e$
b0 d$
0c$
1b$
1a$
1`$
0_$
0^$
1]$
1\$
1[$
0Z$
0Y$
1X$
1W$
1V$
0U$
0T$
1S$
1R$
1Q$
0P$
0O$
1N$
1M$
1L$
0K$
0J$
1I$
1H$
1G$
0F$
0E$
1D$
1C$
1B$
0A$
0@$
1?$
1>$
1=$
0<$
0;$
1:$
19$
18$
07$
06$
15$
14$
13$
02$
01$
10$
1/$
1.$
0-$
0,$
1+$
1*$
1)$
0($
0'$
1&$
1%$
1$$
0#$
0"$
1!$
1~#
1}#
0|#
0{#
1z#
1y#
1x#
0w#
0v#
1u#
1t#
1s#
0r#
0q#
1p#
1o#
1n#
0m#
0l#
1k#
1j#
1i#
0h#
0g#
1f#
0e#
1d#
1c#
0b#
0a#
0`#
0_#
0^#
1]#
0\#
0[#
1Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
10#
0/#
0.#
1-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
b100000000100 "#
b11111111111111111110000000000000 !#
b11111111111111111110100000000100 ~"
b10000000000000 }"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
1""
0!"
0~
0}
1|
1{
0z
0y
1x
0w
0v
0u
0t
0s
0r
1q
0p
0o
1n
0m
1l
0k
0j
1i
0h
1g
0f
0e
1d
0c
1b
0a
0`
1_
0^
1]
0\
0[
1Z
0Y
1X
0W
0V
1U
0T
1S
0R
0Q
1P
0O
1N
0M
0L
1K
0J
0I
0H
0G
0F
0E
1D
0C
0B
1A
0@
1?
0>
1=
0<
b11011111111011 ;
b0 :
b1011111111011 9
b10000000000000 8
b11011111111011 7
b11011111111011 6
b100000000100 5
04
b1011111111011 3
b10000000000000 2
b0 1
b1 0
b0 /
b11011111111011 .
b11011111111011 -
b11011111111011 ,
b1011111111011 +
b10000000000000 *
b0 )
b1011111111011 (
b0 '
b10000000000000 &
b11011111111011 %
0$
b1111111111111111111111111111111x #
bz "
bz !
$end
#1
1I
1G
1C
0D
1B
b100000000101 %
b100000000101 ,
1>
b11 :
b100000000101 .
0?
b11011111111100 6
b11011111111100 ;
1&#
b100000000101 5
b100000000101 "#
b11011111111011 j$
b11011111111011 0
b100000000101 7
b100000000101 -
14
b10 '
b10 )
b10 1
b10 d$
#2
0I
0G
0C
1D
0B
b1 %
b1 ,
0>
b0 :
b1 .
1?
b11011111111011 6
b11011111111011 ;
0&#
b100000000100 5
b100000000100 "#
b1 j$
b1 0
b11011111111011 7
b11011111111011 -
04
b100 '
b100 )
b100 1
b100 d$
#3
b101 '
b101 )
b101 1
b101 d$
#4
1I
1G
1C
0D
1B
b11011111111011 %
b11011111111011 ,
1>
b11 :
b11011111111011 .
0?
b11011111111100 6
b11011111111100 ;
1&#
b100000000101 5
b100000000101 "#
b11011111111011 j$
b11011111111011 0
b100000000101 7
b100000000101 -
14
b110 '
b110 )
b110 1
b110 d$
#5
b11111111111111111111111111111110 %
b11111111111111111111111111111110 ,
b11111111111111111111111111111110 .
b11111111111111111111111111111110 j$
b11111111111111111111111111111110 0
b111 '
b111 )
b111 1
b111 d$
#6
1$
1b$
1^&
b0 /
b0 w$
b0 `&
0a&
0c$
0_&
1a$
1]&
1]$
1Y&
0^$
0Z&
1\$
1X&
1X$
1T&
0Y$
0U&
1W$
1S&
1S$
1O&
0T$
0P&
1R$
1N&
1N$
1J&
0O$
0K&
1M$
1I&
1e#
1a%
1I$
1E&
1a#
1]%
0J$
0F&
1H$
1D&
1`#
1\%
1D$
1@&
1\#
1X%
0E$
0A&
0]#
0Y%
1C$
1?&
1[#
1W%
1?$
1;&
1W#
1S%
0@$
0<&
1>$
1:&
1V#
1R%
1:$
16&
1R#
1N%
0;$
07&
19$
15&
1Q#
1M%
15$
11&
1H#
1D%
06$
02&
14$
10&
1G#
1C%
10$
1,&
1M#
1I%
01$
0-&
1/$
1+&
1L#
1H%
1+$
1'&
1C#
1?%
0,$
0(&
1*$
1&&
1B#
1>%
1&$
1"&
1>#
1:%
0'$
0#&
1%$
1!&
1=#
19%
1!$
1{%
19#
15%
0"$
0|%
1~#
1z%
18#
14%
1z#
1v%
14#
10%
0{#
0w%
1y#
1u%
13#
1/%
1u#
1q%
1/#
1+%
0v#
0r%
00#
0,%
1t#
1p%
1.#
1*%
1p#
1l%
1*#
1&%
0q#
0m%
1o#
1k%
1)#
1%%
1k#
1g%
1%#
0B
1!%
0l#
0h%
0&#
05#
0:#
0?#
0D#
0I#
0N#
0S#
0X#
0b#
0>
b10 :
0"%
01%
06%
0;%
0@%
0E%
0J%
0O%
0T%
0^%
1j#
b0 7
b0 -
1f%
1?
0N
0S
0X
0]
0b
0g
0l
0q
0{
0D
0""
b101 6
b101 ;
0+#
1f#
b11111111111111111111111111111111 !#
0g#
b0 5
b0 "#
0'%
1b%
b11111111111111111111111111111111 z$
0c%
b0 v$
b0 |$
1$#
12#
17#
1<#
1A#
1F#
1K#
1P#
1U#
1_#
1~$
1.%
13%
18%
1=%
1B%
1G%
1L%
1Q%
1[%
b11111111111111111111111111111101 ~"
0=
0K
0P
0U
0Z
0_
0d
0i
0n
0x
b11111111111111111111111111111101 y$
1@
0|
1'#
0c#
b0 i$
b0 s$
1#%
0_%
b0 .
b0 %
b0 ,
b10 (
b10 +
b10 3
b10 9
b10 g$
b10 l$
b10 o$
b10 r$
b10 u$
b10 &
b10 *
b10 2
b10 8
b10 }"
b10 e$
b10 k$
b10 n$
b10 q$
b10 t$
b10 x$
b0 j$
b0 0
b10 '
b10 )
b10 1
b10 d$
#7
