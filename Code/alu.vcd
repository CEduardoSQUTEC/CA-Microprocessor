$date
	Fri Jun 12 20:48:49 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu_tb $end
$var wire 32 ! result [31:0] $end
$var wire 1 " flag $end
$var reg 32 # a [31:0] $end
$var reg 4 $ aluop [3:0] $end
$var reg 32 % b [31:0] $end
$scope module DUT_alu $end
$var wire 4 & ALUop [3:0] $end
$var wire 32 ' a [31:0] $end
$var wire 32 ( b [31:0] $end
$var wire 32 ) result_comparison [31:0] $end
$var wire 32 * result_logic [31:0] $end
$var wire 32 + result_arithmetic_logic [31:0] $end
$var wire 32 , result_arithmetic [31:0] $end
$var wire 32 - result [31:0] $end
$var reg 1 " flag $end
$scope module Arithmetic_part_ $end
$var wire 4 . ALUop [3:0] $end
$var wire 32 / a [31:0] $end
$var wire 32 0 b [31:0] $end
$var wire 32 1 wire_sum [31:0] $end
$var wire 32 2 wire_sub [31:0] $end
$var wire 1 3 op_sign $end
$var reg 32 4 result [31:0] $end
$scope module sub $end
$var wire 32 5 a [31:0] $end
$var wire 32 6 b [31:0] $end
$var wire 1 3 f_cin $end
$var wire 32 7 result [31:0] $end
$var wire 32 8 carry [31:0] $end
$scope module add0 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 3 cin $end
$var wire 1 ; cout $end
$var wire 1 < sum $end
$upscope $end
$scope module add1 $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? cin $end
$var wire 1 @ cout $end
$var wire 1 A sum $end
$upscope $end
$scope module add10 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D cin $end
$var wire 1 E cout $end
$var wire 1 F sum $end
$upscope $end
$scope module add11 $end
$var wire 1 G a $end
$var wire 1 H b $end
$var wire 1 I cin $end
$var wire 1 J cout $end
$var wire 1 K sum $end
$upscope $end
$scope module add12 $end
$var wire 1 L a $end
$var wire 1 M b $end
$var wire 1 N cin $end
$var wire 1 O cout $end
$var wire 1 P sum $end
$upscope $end
$scope module add13 $end
$var wire 1 Q a $end
$var wire 1 R b $end
$var wire 1 S cin $end
$var wire 1 T cout $end
$var wire 1 U sum $end
$upscope $end
$scope module add14 $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 X cin $end
$var wire 1 Y cout $end
$var wire 1 Z sum $end
$upscope $end
$scope module add15 $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] cin $end
$var wire 1 ^ cout $end
$var wire 1 _ sum $end
$upscope $end
$scope module add16 $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b cin $end
$var wire 1 c cout $end
$var wire 1 d sum $end
$upscope $end
$scope module add17 $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g cin $end
$var wire 1 h cout $end
$var wire 1 i sum $end
$upscope $end
$scope module add18 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l cin $end
$var wire 1 m cout $end
$var wire 1 n sum $end
$upscope $end
$scope module add19 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q cin $end
$var wire 1 r cout $end
$var wire 1 s sum $end
$upscope $end
$scope module add2 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 v cin $end
$var wire 1 w cout $end
$var wire 1 x sum $end
$upscope $end
$scope module add20 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 { cin $end
$var wire 1 | cout $end
$var wire 1 } sum $end
$upscope $end
$scope module add21 $end
$var wire 1 ~ a $end
$var wire 1 !" b $end
$var wire 1 "" cin $end
$var wire 1 #" cout $end
$var wire 1 $" sum $end
$upscope $end
$scope module add22 $end
$var wire 1 %" a $end
$var wire 1 &" b $end
$var wire 1 '" cin $end
$var wire 1 (" cout $end
$var wire 1 )" sum $end
$upscope $end
$scope module add23 $end
$var wire 1 *" a $end
$var wire 1 +" b $end
$var wire 1 ," cin $end
$var wire 1 -" cout $end
$var wire 1 ." sum $end
$upscope $end
$scope module add24 $end
$var wire 1 /" a $end
$var wire 1 0" b $end
$var wire 1 1" cin $end
$var wire 1 2" cout $end
$var wire 1 3" sum $end
$upscope $end
$scope module add25 $end
$var wire 1 4" a $end
$var wire 1 5" b $end
$var wire 1 6" cin $end
$var wire 1 7" cout $end
$var wire 1 8" sum $end
$upscope $end
$scope module add26 $end
$var wire 1 9" a $end
$var wire 1 :" b $end
$var wire 1 ;" cin $end
$var wire 1 <" cout $end
$var wire 1 =" sum $end
$upscope $end
$scope module add27 $end
$var wire 1 >" a $end
$var wire 1 ?" b $end
$var wire 1 @" cin $end
$var wire 1 A" cout $end
$var wire 1 B" sum $end
$upscope $end
$scope module add28 $end
$var wire 1 C" a $end
$var wire 1 D" b $end
$var wire 1 E" cin $end
$var wire 1 F" cout $end
$var wire 1 G" sum $end
$upscope $end
$scope module add29 $end
$var wire 1 H" a $end
$var wire 1 I" b $end
$var wire 1 J" cin $end
$var wire 1 K" cout $end
$var wire 1 L" sum $end
$upscope $end
$scope module add3 $end
$var wire 1 M" a $end
$var wire 1 N" b $end
$var wire 1 O" cin $end
$var wire 1 P" cout $end
$var wire 1 Q" sum $end
$upscope $end
$scope module add30 $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 T" cin $end
$var wire 1 U" cout $end
$var wire 1 V" sum $end
$upscope $end
$scope module add31 $end
$var wire 1 W" a $end
$var wire 1 X" b $end
$var wire 1 Y" cin $end
$var wire 1 Z" cout $end
$var wire 1 [" sum $end
$upscope $end
$scope module add4 $end
$var wire 1 \" a $end
$var wire 1 ]" b $end
$var wire 1 ^" cin $end
$var wire 1 _" cout $end
$var wire 1 `" sum $end
$upscope $end
$scope module add5 $end
$var wire 1 a" a $end
$var wire 1 b" b $end
$var wire 1 c" cin $end
$var wire 1 d" cout $end
$var wire 1 e" sum $end
$upscope $end
$scope module add6 $end
$var wire 1 f" a $end
$var wire 1 g" b $end
$var wire 1 h" cin $end
$var wire 1 i" cout $end
$var wire 1 j" sum $end
$upscope $end
$scope module add7 $end
$var wire 1 k" a $end
$var wire 1 l" b $end
$var wire 1 m" cin $end
$var wire 1 n" cout $end
$var wire 1 o" sum $end
$upscope $end
$scope module add8 $end
$var wire 1 p" a $end
$var wire 1 q" b $end
$var wire 1 r" cin $end
$var wire 1 s" cout $end
$var wire 1 t" sum $end
$upscope $end
$scope module add9 $end
$var wire 1 u" a $end
$var wire 1 v" b $end
$var wire 1 w" cin $end
$var wire 1 x" cout $end
$var wire 1 y" sum $end
$upscope $end
$upscope $end
$scope module sum $end
$var wire 32 z" a [31:0] $end
$var wire 32 {" b [31:0] $end
$var wire 1 3 f_cin $end
$var wire 32 |" result [31:0] $end
$var wire 32 }" carry [31:0] $end
$scope module add0 $end
$var wire 1 ~" a $end
$var wire 1 !# b $end
$var wire 1 3 cin $end
$var wire 1 "# cout $end
$var wire 1 ## sum $end
$upscope $end
$scope module add1 $end
$var wire 1 $# a $end
$var wire 1 %# b $end
$var wire 1 &# cin $end
$var wire 1 '# cout $end
$var wire 1 (# sum $end
$upscope $end
$scope module add10 $end
$var wire 1 )# a $end
$var wire 1 *# b $end
$var wire 1 +# cin $end
$var wire 1 ,# cout $end
$var wire 1 -# sum $end
$upscope $end
$scope module add11 $end
$var wire 1 .# a $end
$var wire 1 /# b $end
$var wire 1 0# cin $end
$var wire 1 1# cout $end
$var wire 1 2# sum $end
$upscope $end
$scope module add12 $end
$var wire 1 3# a $end
$var wire 1 4# b $end
$var wire 1 5# cin $end
$var wire 1 6# cout $end
$var wire 1 7# sum $end
$upscope $end
$scope module add13 $end
$var wire 1 8# a $end
$var wire 1 9# b $end
$var wire 1 :# cin $end
$var wire 1 ;# cout $end
$var wire 1 <# sum $end
$upscope $end
$scope module add14 $end
$var wire 1 =# a $end
$var wire 1 ># b $end
$var wire 1 ?# cin $end
$var wire 1 @# cout $end
$var wire 1 A# sum $end
$upscope $end
$scope module add15 $end
$var wire 1 B# a $end
$var wire 1 C# b $end
$var wire 1 D# cin $end
$var wire 1 E# cout $end
$var wire 1 F# sum $end
$upscope $end
$scope module add16 $end
$var wire 1 G# a $end
$var wire 1 H# b $end
$var wire 1 I# cin $end
$var wire 1 J# cout $end
$var wire 1 K# sum $end
$upscope $end
$scope module add17 $end
$var wire 1 L# a $end
$var wire 1 M# b $end
$var wire 1 N# cin $end
$var wire 1 O# cout $end
$var wire 1 P# sum $end
$upscope $end
$scope module add18 $end
$var wire 1 Q# a $end
$var wire 1 R# b $end
$var wire 1 S# cin $end
$var wire 1 T# cout $end
$var wire 1 U# sum $end
$upscope $end
$scope module add19 $end
$var wire 1 V# a $end
$var wire 1 W# b $end
$var wire 1 X# cin $end
$var wire 1 Y# cout $end
$var wire 1 Z# sum $end
$upscope $end
$scope module add2 $end
$var wire 1 [# a $end
$var wire 1 \# b $end
$var wire 1 ]# cin $end
$var wire 1 ^# cout $end
$var wire 1 _# sum $end
$upscope $end
$scope module add20 $end
$var wire 1 `# a $end
$var wire 1 a# b $end
$var wire 1 b# cin $end
$var wire 1 c# cout $end
$var wire 1 d# sum $end
$upscope $end
$scope module add21 $end
$var wire 1 e# a $end
$var wire 1 f# b $end
$var wire 1 g# cin $end
$var wire 1 h# cout $end
$var wire 1 i# sum $end
$upscope $end
$scope module add22 $end
$var wire 1 j# a $end
$var wire 1 k# b $end
$var wire 1 l# cin $end
$var wire 1 m# cout $end
$var wire 1 n# sum $end
$upscope $end
$scope module add23 $end
$var wire 1 o# a $end
$var wire 1 p# b $end
$var wire 1 q# cin $end
$var wire 1 r# cout $end
$var wire 1 s# sum $end
$upscope $end
$scope module add24 $end
$var wire 1 t# a $end
$var wire 1 u# b $end
$var wire 1 v# cin $end
$var wire 1 w# cout $end
$var wire 1 x# sum $end
$upscope $end
$scope module add25 $end
$var wire 1 y# a $end
$var wire 1 z# b $end
$var wire 1 {# cin $end
$var wire 1 |# cout $end
$var wire 1 }# sum $end
$upscope $end
$scope module add26 $end
$var wire 1 ~# a $end
$var wire 1 !$ b $end
$var wire 1 "$ cin $end
$var wire 1 #$ cout $end
$var wire 1 $$ sum $end
$upscope $end
$scope module add27 $end
$var wire 1 %$ a $end
$var wire 1 &$ b $end
$var wire 1 '$ cin $end
$var wire 1 ($ cout $end
$var wire 1 )$ sum $end
$upscope $end
$scope module add28 $end
$var wire 1 *$ a $end
$var wire 1 +$ b $end
$var wire 1 ,$ cin $end
$var wire 1 -$ cout $end
$var wire 1 .$ sum $end
$upscope $end
$scope module add29 $end
$var wire 1 /$ a $end
$var wire 1 0$ b $end
$var wire 1 1$ cin $end
$var wire 1 2$ cout $end
$var wire 1 3$ sum $end
$upscope $end
$scope module add3 $end
$var wire 1 4$ a $end
$var wire 1 5$ b $end
$var wire 1 6$ cin $end
$var wire 1 7$ cout $end
$var wire 1 8$ sum $end
$upscope $end
$scope module add30 $end
$var wire 1 9$ a $end
$var wire 1 :$ b $end
$var wire 1 ;$ cin $end
$var wire 1 <$ cout $end
$var wire 1 =$ sum $end
$upscope $end
$scope module add31 $end
$var wire 1 >$ a $end
$var wire 1 ?$ b $end
$var wire 1 @$ cin $end
$var wire 1 A$ cout $end
$var wire 1 B$ sum $end
$upscope $end
$scope module add4 $end
$var wire 1 C$ a $end
$var wire 1 D$ b $end
$var wire 1 E$ cin $end
$var wire 1 F$ cout $end
$var wire 1 G$ sum $end
$upscope $end
$scope module add5 $end
$var wire 1 H$ a $end
$var wire 1 I$ b $end
$var wire 1 J$ cin $end
$var wire 1 K$ cout $end
$var wire 1 L$ sum $end
$upscope $end
$scope module add6 $end
$var wire 1 M$ a $end
$var wire 1 N$ b $end
$var wire 1 O$ cin $end
$var wire 1 P$ cout $end
$var wire 1 Q$ sum $end
$upscope $end
$scope module add7 $end
$var wire 1 R$ a $end
$var wire 1 S$ b $end
$var wire 1 T$ cin $end
$var wire 1 U$ cout $end
$var wire 1 V$ sum $end
$upscope $end
$scope module add8 $end
$var wire 1 W$ a $end
$var wire 1 X$ b $end
$var wire 1 Y$ cin $end
$var wire 1 Z$ cout $end
$var wire 1 [$ sum $end
$upscope $end
$scope module add9 $end
$var wire 1 \$ a $end
$var wire 1 ]$ b $end
$var wire 1 ^$ cin $end
$var wire 1 _$ cout $end
$var wire 1 `$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module Comparison_part_ $end
$var wire 32 a$ a [31:0] $end
$var wire 32 b$ b [31:0] $end
$var wire 32 c$ result [31:0] $end
$var wire 32 d$ comp [31:0] $end
$scope module sign $end
$var wire 32 e$ a [31:0] $end
$var wire 1 f$ bit_to_extend $end
$upscope $end
$scope module slt $end
$var wire 32 g$ a [31:0] $end
$var wire 32 h$ b [31:0] $end
$var wire 1 i$ f_cin $end
$var wire 32 j$ result [31:0] $end
$var wire 32 k$ carry [31:0] $end
$scope module add0 $end
$var wire 1 l$ a $end
$var wire 1 m$ b $end
$var wire 1 i$ cin $end
$var wire 1 n$ cout $end
$var wire 1 o$ sum $end
$upscope $end
$scope module add1 $end
$var wire 1 p$ a $end
$var wire 1 q$ b $end
$var wire 1 r$ cin $end
$var wire 1 s$ cout $end
$var wire 1 t$ sum $end
$upscope $end
$scope module add10 $end
$var wire 1 u$ a $end
$var wire 1 v$ b $end
$var wire 1 w$ cin $end
$var wire 1 x$ cout $end
$var wire 1 y$ sum $end
$upscope $end
$scope module add11 $end
$var wire 1 z$ a $end
$var wire 1 {$ b $end
$var wire 1 |$ cin $end
$var wire 1 }$ cout $end
$var wire 1 ~$ sum $end
$upscope $end
$scope module add12 $end
$var wire 1 !% a $end
$var wire 1 "% b $end
$var wire 1 #% cin $end
$var wire 1 $% cout $end
$var wire 1 %% sum $end
$upscope $end
$scope module add13 $end
$var wire 1 &% a $end
$var wire 1 '% b $end
$var wire 1 (% cin $end
$var wire 1 )% cout $end
$var wire 1 *% sum $end
$upscope $end
$scope module add14 $end
$var wire 1 +% a $end
$var wire 1 ,% b $end
$var wire 1 -% cin $end
$var wire 1 .% cout $end
$var wire 1 /% sum $end
$upscope $end
$scope module add15 $end
$var wire 1 0% a $end
$var wire 1 1% b $end
$var wire 1 2% cin $end
$var wire 1 3% cout $end
$var wire 1 4% sum $end
$upscope $end
$scope module add16 $end
$var wire 1 5% a $end
$var wire 1 6% b $end
$var wire 1 7% cin $end
$var wire 1 8% cout $end
$var wire 1 9% sum $end
$upscope $end
$scope module add17 $end
$var wire 1 :% a $end
$var wire 1 ;% b $end
$var wire 1 <% cin $end
$var wire 1 =% cout $end
$var wire 1 >% sum $end
$upscope $end
$scope module add18 $end
$var wire 1 ?% a $end
$var wire 1 @% b $end
$var wire 1 A% cin $end
$var wire 1 B% cout $end
$var wire 1 C% sum $end
$upscope $end
$scope module add19 $end
$var wire 1 D% a $end
$var wire 1 E% b $end
$var wire 1 F% cin $end
$var wire 1 G% cout $end
$var wire 1 H% sum $end
$upscope $end
$scope module add2 $end
$var wire 1 I% a $end
$var wire 1 J% b $end
$var wire 1 K% cin $end
$var wire 1 L% cout $end
$var wire 1 M% sum $end
$upscope $end
$scope module add20 $end
$var wire 1 N% a $end
$var wire 1 O% b $end
$var wire 1 P% cin $end
$var wire 1 Q% cout $end
$var wire 1 R% sum $end
$upscope $end
$scope module add21 $end
$var wire 1 S% a $end
$var wire 1 T% b $end
$var wire 1 U% cin $end
$var wire 1 V% cout $end
$var wire 1 W% sum $end
$upscope $end
$scope module add22 $end
$var wire 1 X% a $end
$var wire 1 Y% b $end
$var wire 1 Z% cin $end
$var wire 1 [% cout $end
$var wire 1 \% sum $end
$upscope $end
$scope module add23 $end
$var wire 1 ]% a $end
$var wire 1 ^% b $end
$var wire 1 _% cin $end
$var wire 1 `% cout $end
$var wire 1 a% sum $end
$upscope $end
$scope module add24 $end
$var wire 1 b% a $end
$var wire 1 c% b $end
$var wire 1 d% cin $end
$var wire 1 e% cout $end
$var wire 1 f% sum $end
$upscope $end
$scope module add25 $end
$var wire 1 g% a $end
$var wire 1 h% b $end
$var wire 1 i% cin $end
$var wire 1 j% cout $end
$var wire 1 k% sum $end
$upscope $end
$scope module add26 $end
$var wire 1 l% a $end
$var wire 1 m% b $end
$var wire 1 n% cin $end
$var wire 1 o% cout $end
$var wire 1 p% sum $end
$upscope $end
$scope module add27 $end
$var wire 1 q% a $end
$var wire 1 r% b $end
$var wire 1 s% cin $end
$var wire 1 t% cout $end
$var wire 1 u% sum $end
$upscope $end
$scope module add28 $end
$var wire 1 v% a $end
$var wire 1 w% b $end
$var wire 1 x% cin $end
$var wire 1 y% cout $end
$var wire 1 z% sum $end
$upscope $end
$scope module add29 $end
$var wire 1 {% a $end
$var wire 1 |% b $end
$var wire 1 }% cin $end
$var wire 1 ~% cout $end
$var wire 1 !& sum $end
$upscope $end
$scope module add3 $end
$var wire 1 "& a $end
$var wire 1 #& b $end
$var wire 1 $& cin $end
$var wire 1 %& cout $end
$var wire 1 && sum $end
$upscope $end
$scope module add30 $end
$var wire 1 '& a $end
$var wire 1 (& b $end
$var wire 1 )& cin $end
$var wire 1 *& cout $end
$var wire 1 +& sum $end
$upscope $end
$scope module add31 $end
$var wire 1 ,& a $end
$var wire 1 -& b $end
$var wire 1 .& cin $end
$var wire 1 /& cout $end
$var wire 1 0& sum $end
$upscope $end
$scope module add4 $end
$var wire 1 1& a $end
$var wire 1 2& b $end
$var wire 1 3& cin $end
$var wire 1 4& cout $end
$var wire 1 5& sum $end
$upscope $end
$scope module add5 $end
$var wire 1 6& a $end
$var wire 1 7& b $end
$var wire 1 8& cin $end
$var wire 1 9& cout $end
$var wire 1 :& sum $end
$upscope $end
$scope module add6 $end
$var wire 1 ;& a $end
$var wire 1 <& b $end
$var wire 1 =& cin $end
$var wire 1 >& cout $end
$var wire 1 ?& sum $end
$upscope $end
$scope module add7 $end
$var wire 1 @& a $end
$var wire 1 A& b $end
$var wire 1 B& cin $end
$var wire 1 C& cout $end
$var wire 1 D& sum $end
$upscope $end
$scope module add8 $end
$var wire 1 E& a $end
$var wire 1 F& b $end
$var wire 1 G& cin $end
$var wire 1 H& cout $end
$var wire 1 I& sum $end
$upscope $end
$scope module add9 $end
$var wire 1 J& a $end
$var wire 1 K& b $end
$var wire 1 L& cin $end
$var wire 1 M& cout $end
$var wire 1 N& sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module Logic_part_ $end
$var wire 4 O& ALUop [3:0] $end
$var wire 32 P& a [31:0] $end
$var wire 32 Q& b [31:0] $end
$var wire 32 R& xor_w [31:0] $end
$var wire 32 S& or_w [31:0] $end
$var wire 32 T& and_w [31:0] $end
$var reg 32 U& result [31:0] $end
$scope module and_32 $end
$var wire 32 V& a [31:0] $end
$var wire 32 W& b [31:0] $end
$var wire 32 X& result [31:0] $end
$upscope $end
$scope module or_32 $end
$var wire 32 Y& a [31:0] $end
$var wire 32 Z& b [31:0] $end
$var wire 32 [& result [31:0] $end
$upscope $end
$scope module xor_32 $end
$var wire 32 \& a [31:0] $end
$var wire 32 ]& b [31:0] $end
$var wire 32 ^& result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module nor_ $end
$var wire 32 _& a [31:0] $end
$var wire 32 `& b [31:0] $end
$var wire 32 a& result [31:0] $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx a&
bz `&
bz _&
b11011111111011 ^&
b1011111111011 ]&
b10000000000000 \&
b11011111111011 [&
b1011111111011 Z&
b10000000000000 Y&
b1 X&
b1011111111011 W&
b10000000000000 V&
b1 U&
b1 T&
b11011111111011 S&
b11011111111011 R&
b1011111111011 Q&
b10000000000000 P&
b0 O&
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
04&
03&
02&
01&
00&
1/&
1.&
1-&
0,&
0+&
1*&
1)&
1(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
1~%
1}%
1|%
0{%
0z%
1y%
1x%
1w%
0v%
0u%
1t%
1s%
1r%
0q%
0p%
1o%
1n%
1m%
0l%
0k%
1j%
1i%
1h%
0g%
0f%
1e%
1d%
1c%
0b%
0a%
1`%
1_%
1^%
0]%
0\%
1[%
1Z%
1Y%
0X%
0W%
1V%
1U%
1T%
0S%
0R%
1Q%
1P%
1O%
0N%
1M%
0L%
0K%
1J%
0I%
0H%
1G%
1F%
1E%
0D%
0C%
1B%
1A%
1@%
0?%
0>%
1=%
1<%
1;%
0:%
09%
18%
17%
16%
05%
04%
13%
12%
11%
00%
0/%
1.%
1-%
1,%
0+%
0*%
1)%
0(%
1'%
1&%
0%%
0$%
0#%
0"%
0!%
1~$
0}$
0|$
1{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
1o$
0n$
0m$
0l$
b11111111111111111110000000000000 k$
b100000000101 j$
1i$
b11111111111111111110100000000100 h$
b10000000000000 g$
0f$
b0 e$
b100000000101 d$
b0 c$
b1011111111011 b$
b10000000000000 a$
1`$
0_$
0^$
1]$
0\$
1[$
0Z$
0Y$
1X$
0W$
1V$
0U$
0T$
1S$
0R$
1Q$
0P$
0O$
1N$
0M$
1L$
0K$
0J$
1I$
0H$
1G$
0F$
0E$
1D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
18$
07$
06$
15$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
1<#
0;#
0:#
09#
18#
17#
06#
05#
14#
03#
02#
01#
00#
0/#
0.#
1-#
0,#
0+#
1*#
0)#
1(#
0'#
0&#
1%#
0$#
1##
0"#
1!#
0~"
b0 }"
b11011111111011 |"
b1011111111011 {"
b10000000000000 z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
1Z"
1Y"
1X"
0W"
0V"
1U"
1T"
1S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
1K"
1J"
1I"
0H"
0G"
1F"
1E"
1D"
0C"
0B"
1A"
1@"
1?"
0>"
0="
1<"
1;"
1:"
09"
08"
17"
16"
15"
04"
03"
12"
11"
10"
0/"
0."
1-"
1,"
1+"
0*"
0)"
1("
1'"
1&"
0%"
0$"
1#"
1""
1!"
0~
0}
1|
1{
1z
0y
1x
0w
0v
1u
0t
0s
1r
1q
1p
0o
0n
1m
1l
1k
0j
0i
1h
1g
1f
0e
0d
1c
1b
1a
0`
0_
1^
1]
1\
0[
0Z
1Y
1X
1W
0V
0U
1T
0S
1R
1Q
0P
0O
0N
0M
0L
1K
0J
0I
1H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
b11111111111111111110000000000000 8
b100000000100 7
b11111111111111111110100000000100 6
b10000000000000 5
b11011111111011 4
03
b100000000100 2
b11011111111011 1
b1011111111011 0
b10000000000000 /
b0 .
b11011111111011 -
b11011111111011 ,
b11011111111011 +
b1 *
b0 )
b1011111111011 (
b10000000000000 '
b0 &
b1011111111011 %
b0 $
b10000000000000 #
0"
b11011111111011 !
$end
#1
1_#
1]#
1'#
0(#
1&#
b100000000101 !
b100000000101 -
b11 }"
1"#
b100000000101 +
b100000000101 2
b100000000101 7
1<
b11011111111100 1
b11011111111100 |"
0##
b100000000101 ,
b100000000101 4
13
b11011111111011 *
b11011111111011 U&
b10 $
b10 &
b10 .
b10 O&
#2
0_#
0]#
0'#
1(#
0&#
b1 !
b1 -
b0 }"
0"#
b1 +
b100000000100 2
b100000000100 7
0<
b11011111111011 1
b11011111111011 |"
1##
b11011111111011 ,
b11011111111011 4
03
b1 *
b1 U&
b100 $
b100 &
b100 .
b100 O&
#3
b11011111111011 !
b11011111111011 -
b11011111111011 +
b11011111111011 *
b11011111111011 U&
b101 $
b101 &
b101 .
b101 O&
#4
1_#
1]#
1'#
0(#
1&#
b11 }"
1"#
b100000000101 2
b100000000101 7
1<
b11011111111100 1
b11011111111100 |"
0##
b100000000101 ,
b100000000101 4
13
b110 $
b110 &
b110 .
b110 O&
#5
b11111111111111111100100000000100 !
b11111111111111111100100000000100 -
b11111111111111111100100000000100 +
b11111111111111111100100000000100 *
b11111111111111111100100000000100 U&
b111 $
b111 &
b111 .
b111 O&
#6
1"
b0 !
b0 -
b100000000101 +
b11011111111011 *
b11011111111011 U&
b1010 $
b1010 &
b1010 .
b1010 O&
#14
