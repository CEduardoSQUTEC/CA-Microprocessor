$date
	Fri Jun 12 18:21:43 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Logic_tb $end
$var wire 32 ! result [31:0] $end
$var reg 4 " ALUop [3:0] $end
$var reg 32 # a [31:0] $end
$var reg 32 $ b [31:0] $end
$scope module logic_ $end
$var wire 4 % ALUop [3:0] $end
$var wire 32 & a [31:0] $end
$var wire 32 ' b [31:0] $end
$var wire 32 ( xor_w [31:0] $end
$var wire 32 ) or_w [31:0] $end
$var wire 32 * and_w [31:0] $end
$var reg 32 + result [31:0] $end
$scope module and_32 $end
$var wire 32 , a [31:0] $end
$var wire 32 - b [31:0] $end
$var wire 32 . result [31:0] $end
$upscope $end
$scope module or_32 $end
$var wire 32 / a [31:0] $end
$var wire 32 0 b [31:0] $end
$var wire 32 1 result [31:0] $end
$upscope $end
$scope module xor_32 $end
$var wire 32 2 a [31:0] $end
$var wire 32 3 b [31:0] $end
$var wire 32 4 result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module nor_ $end
$var wire 32 5 a [31:0] $end
$var wire 32 6 b [31:0] $end
$var wire 32 7 result [31:0] $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 7
bz 6
bz 5
b11111111111 4
b11111111111 3
b0 2
b11111111111 1
b11111111111 0
b0 /
b0 .
b11111111111 -
b0 ,
b0 +
b0 *
b11111111111 )
b11111111111 (
b11111111111 '
b0 &
b100 %
b11111111111 $
b0 #
b100 "
b0 !
$end
#5
b1 *
b1 .
b11111100000 (
b11111100000 4
b11111 #
b11111 &
b11111 ,
b11111 /
b11111 2
b11111111111 !
b11111111111 +
b101 "
b101 %
#10
b11111100000 !
b11111100000 +
b110 "
b110 %
#15
b11111111111111111111100000000000 !
b11111111111111111111100000000000 +
b111 "
b111 %
#20
