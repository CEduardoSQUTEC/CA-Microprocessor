$date
	Thu Jul  2 17:34:06 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 1 ! zero $end
$var wire 32 " y [31:0] $end
$var reg 32 # a [31:0] $end
$var reg 32 $ b [31:0] $end
$var reg 3 % f [2:0] $end
$scope module dut $end
$var wire 32 & a [31:0] $end
$var wire 32 ' b [31:0] $end
$var wire 3 ( f [2:0] $end
$var wire 32 ) result_sub [31:0] $end
$var wire 32 * result_slt [31:0] $end
$var wire 32 + result_or [31:0] $end
$var wire 32 , result_and [31:0] $end
$var wire 32 - result_add [31:0] $end
$var reg 32 . y [31:0] $end
$var reg 1 ! zero $end
$scope module add $end
$var wire 32 / a [31:0] $end
$var wire 32 0 b [31:0] $end
$var wire 1 1 f_cin $end
$var wire 32 2 result [31:0] $end
$var wire 32 3 carry [31:0] $end
$scope module add0 $end
$var wire 1 4 a $end
$var wire 1 5 b $end
$var wire 1 1 cin $end
$var wire 1 6 cout $end
$var wire 1 7 sum $end
$upscope $end
$scope module add1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : cin $end
$var wire 1 ; cout $end
$var wire 1 < sum $end
$upscope $end
$scope module add10 $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? cin $end
$var wire 1 @ cout $end
$var wire 1 A sum $end
$upscope $end
$scope module add11 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D cin $end
$var wire 1 E cout $end
$var wire 1 F sum $end
$upscope $end
$scope module add12 $end
$var wire 1 G a $end
$var wire 1 H b $end
$var wire 1 I cin $end
$var wire 1 J cout $end
$var wire 1 K sum $end
$upscope $end
$scope module add13 $end
$var wire 1 L a $end
$var wire 1 M b $end
$var wire 1 N cin $end
$var wire 1 O cout $end
$var wire 1 P sum $end
$upscope $end
$scope module add14 $end
$var wire 1 Q a $end
$var wire 1 R b $end
$var wire 1 S cin $end
$var wire 1 T cout $end
$var wire 1 U sum $end
$upscope $end
$scope module add15 $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 X cin $end
$var wire 1 Y cout $end
$var wire 1 Z sum $end
$upscope $end
$scope module add16 $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] cin $end
$var wire 1 ^ cout $end
$var wire 1 _ sum $end
$upscope $end
$scope module add17 $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b cin $end
$var wire 1 c cout $end
$var wire 1 d sum $end
$upscope $end
$scope module add18 $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g cin $end
$var wire 1 h cout $end
$var wire 1 i sum $end
$upscope $end
$scope module add19 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l cin $end
$var wire 1 m cout $end
$var wire 1 n sum $end
$upscope $end
$scope module add2 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q cin $end
$var wire 1 r cout $end
$var wire 1 s sum $end
$upscope $end
$scope module add20 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 v cin $end
$var wire 1 w cout $end
$var wire 1 x sum $end
$upscope $end
$scope module add21 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 { cin $end
$var wire 1 | cout $end
$var wire 1 } sum $end
$upscope $end
$scope module add22 $end
$var wire 1 ~ a $end
$var wire 1 !" b $end
$var wire 1 "" cin $end
$var wire 1 #" cout $end
$var wire 1 $" sum $end
$upscope $end
$scope module add23 $end
$var wire 1 %" a $end
$var wire 1 &" b $end
$var wire 1 '" cin $end
$var wire 1 (" cout $end
$var wire 1 )" sum $end
$upscope $end
$scope module add24 $end
$var wire 1 *" a $end
$var wire 1 +" b $end
$var wire 1 ," cin $end
$var wire 1 -" cout $end
$var wire 1 ." sum $end
$upscope $end
$scope module add25 $end
$var wire 1 /" a $end
$var wire 1 0" b $end
$var wire 1 1" cin $end
$var wire 1 2" cout $end
$var wire 1 3" sum $end
$upscope $end
$scope module add26 $end
$var wire 1 4" a $end
$var wire 1 5" b $end
$var wire 1 6" cin $end
$var wire 1 7" cout $end
$var wire 1 8" sum $end
$upscope $end
$scope module add27 $end
$var wire 1 9" a $end
$var wire 1 :" b $end
$var wire 1 ;" cin $end
$var wire 1 <" cout $end
$var wire 1 =" sum $end
$upscope $end
$scope module add28 $end
$var wire 1 >" a $end
$var wire 1 ?" b $end
$var wire 1 @" cin $end
$var wire 1 A" cout $end
$var wire 1 B" sum $end
$upscope $end
$scope module add29 $end
$var wire 1 C" a $end
$var wire 1 D" b $end
$var wire 1 E" cin $end
$var wire 1 F" cout $end
$var wire 1 G" sum $end
$upscope $end
$scope module add3 $end
$var wire 1 H" a $end
$var wire 1 I" b $end
$var wire 1 J" cin $end
$var wire 1 K" cout $end
$var wire 1 L" sum $end
$upscope $end
$scope module add30 $end
$var wire 1 M" a $end
$var wire 1 N" b $end
$var wire 1 O" cin $end
$var wire 1 P" cout $end
$var wire 1 Q" sum $end
$upscope $end
$scope module add31 $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 T" cin $end
$var wire 1 U" cout $end
$var wire 1 V" sum $end
$upscope $end
$scope module add4 $end
$var wire 1 W" a $end
$var wire 1 X" b $end
$var wire 1 Y" cin $end
$var wire 1 Z" cout $end
$var wire 1 [" sum $end
$upscope $end
$scope module add5 $end
$var wire 1 \" a $end
$var wire 1 ]" b $end
$var wire 1 ^" cin $end
$var wire 1 _" cout $end
$var wire 1 `" sum $end
$upscope $end
$scope module add6 $end
$var wire 1 a" a $end
$var wire 1 b" b $end
$var wire 1 c" cin $end
$var wire 1 d" cout $end
$var wire 1 e" sum $end
$upscope $end
$scope module add7 $end
$var wire 1 f" a $end
$var wire 1 g" b $end
$var wire 1 h" cin $end
$var wire 1 i" cout $end
$var wire 1 j" sum $end
$upscope $end
$scope module add8 $end
$var wire 1 k" a $end
$var wire 1 l" b $end
$var wire 1 m" cin $end
$var wire 1 n" cout $end
$var wire 1 o" sum $end
$upscope $end
$scope module add9 $end
$var wire 1 p" a $end
$var wire 1 q" b $end
$var wire 1 r" cin $end
$var wire 1 s" cout $end
$var wire 1 t" sum $end
$upscope $end
$upscope $end
$scope module logic_and $end
$var wire 32 u" and_a [31:0] $end
$var wire 32 v" and_b [31:0] $end
$var wire 32 w" result_and [31:0] $end
$upscope $end
$scope module logic_or $end
$var wire 32 x" or_a [31:0] $end
$var wire 32 y" or_b [31:0] $end
$var wire 32 z" result_or [31:0] $end
$upscope $end
$scope module slt $end
$var wire 32 {" result_slt [31:0] $end
$var wire 32 |" slt_a [31:0] $end
$var wire 32 }" slt_b [31:0] $end
$var wire 32 ~" slt_comp [31:0] $end
$var wire 32 !# result [31:0] $end
$scope module extsl $end
$var wire 1 "# src $end
$var wire 32 ## out [31:0] $end
$var wire 33 $# ext [32:0] $end
$upscope $end
$scope module slt $end
$var wire 32 %# a [31:0] $end
$var wire 32 &# b [31:0] $end
$var wire 1 '# f_cin $end
$var wire 32 (# result [31:0] $end
$var wire 32 )# carry [31:0] $end
$scope module add0 $end
$var wire 1 *# a $end
$var wire 1 +# b $end
$var wire 1 '# cin $end
$var wire 1 ,# cout $end
$var wire 1 -# sum $end
$upscope $end
$scope module add1 $end
$var wire 1 .# a $end
$var wire 1 /# b $end
$var wire 1 0# cin $end
$var wire 1 1# cout $end
$var wire 1 2# sum $end
$upscope $end
$scope module add10 $end
$var wire 1 3# a $end
$var wire 1 4# b $end
$var wire 1 5# cin $end
$var wire 1 6# cout $end
$var wire 1 7# sum $end
$upscope $end
$scope module add11 $end
$var wire 1 8# a $end
$var wire 1 9# b $end
$var wire 1 :# cin $end
$var wire 1 ;# cout $end
$var wire 1 <# sum $end
$upscope $end
$scope module add12 $end
$var wire 1 =# a $end
$var wire 1 ># b $end
$var wire 1 ?# cin $end
$var wire 1 @# cout $end
$var wire 1 A# sum $end
$upscope $end
$scope module add13 $end
$var wire 1 B# a $end
$var wire 1 C# b $end
$var wire 1 D# cin $end
$var wire 1 E# cout $end
$var wire 1 F# sum $end
$upscope $end
$scope module add14 $end
$var wire 1 G# a $end
$var wire 1 H# b $end
$var wire 1 I# cin $end
$var wire 1 J# cout $end
$var wire 1 K# sum $end
$upscope $end
$scope module add15 $end
$var wire 1 L# a $end
$var wire 1 M# b $end
$var wire 1 N# cin $end
$var wire 1 O# cout $end
$var wire 1 P# sum $end
$upscope $end
$scope module add16 $end
$var wire 1 Q# a $end
$var wire 1 R# b $end
$var wire 1 S# cin $end
$var wire 1 T# cout $end
$var wire 1 U# sum $end
$upscope $end
$scope module add17 $end
$var wire 1 V# a $end
$var wire 1 W# b $end
$var wire 1 X# cin $end
$var wire 1 Y# cout $end
$var wire 1 Z# sum $end
$upscope $end
$scope module add18 $end
$var wire 1 [# a $end
$var wire 1 \# b $end
$var wire 1 ]# cin $end
$var wire 1 ^# cout $end
$var wire 1 _# sum $end
$upscope $end
$scope module add19 $end
$var wire 1 `# a $end
$var wire 1 a# b $end
$var wire 1 b# cin $end
$var wire 1 c# cout $end
$var wire 1 d# sum $end
$upscope $end
$scope module add2 $end
$var wire 1 e# a $end
$var wire 1 f# b $end
$var wire 1 g# cin $end
$var wire 1 h# cout $end
$var wire 1 i# sum $end
$upscope $end
$scope module add20 $end
$var wire 1 j# a $end
$var wire 1 k# b $end
$var wire 1 l# cin $end
$var wire 1 m# cout $end
$var wire 1 n# sum $end
$upscope $end
$scope module add21 $end
$var wire 1 o# a $end
$var wire 1 p# b $end
$var wire 1 q# cin $end
$var wire 1 r# cout $end
$var wire 1 s# sum $end
$upscope $end
$scope module add22 $end
$var wire 1 t# a $end
$var wire 1 u# b $end
$var wire 1 v# cin $end
$var wire 1 w# cout $end
$var wire 1 x# sum $end
$upscope $end
$scope module add23 $end
$var wire 1 y# a $end
$var wire 1 z# b $end
$var wire 1 {# cin $end
$var wire 1 |# cout $end
$var wire 1 }# sum $end
$upscope $end
$scope module add24 $end
$var wire 1 ~# a $end
$var wire 1 !$ b $end
$var wire 1 "$ cin $end
$var wire 1 #$ cout $end
$var wire 1 $$ sum $end
$upscope $end
$scope module add25 $end
$var wire 1 %$ a $end
$var wire 1 &$ b $end
$var wire 1 '$ cin $end
$var wire 1 ($ cout $end
$var wire 1 )$ sum $end
$upscope $end
$scope module add26 $end
$var wire 1 *$ a $end
$var wire 1 +$ b $end
$var wire 1 ,$ cin $end
$var wire 1 -$ cout $end
$var wire 1 .$ sum $end
$upscope $end
$scope module add27 $end
$var wire 1 /$ a $end
$var wire 1 0$ b $end
$var wire 1 1$ cin $end
$var wire 1 2$ cout $end
$var wire 1 3$ sum $end
$upscope $end
$scope module add28 $end
$var wire 1 4$ a $end
$var wire 1 5$ b $end
$var wire 1 6$ cin $end
$var wire 1 7$ cout $end
$var wire 1 8$ sum $end
$upscope $end
$scope module add29 $end
$var wire 1 9$ a $end
$var wire 1 :$ b $end
$var wire 1 ;$ cin $end
$var wire 1 <$ cout $end
$var wire 1 =$ sum $end
$upscope $end
$scope module add3 $end
$var wire 1 >$ a $end
$var wire 1 ?$ b $end
$var wire 1 @$ cin $end
$var wire 1 A$ cout $end
$var wire 1 B$ sum $end
$upscope $end
$scope module add30 $end
$var wire 1 C$ a $end
$var wire 1 D$ b $end
$var wire 1 E$ cin $end
$var wire 1 F$ cout $end
$var wire 1 G$ sum $end
$upscope $end
$scope module add31 $end
$var wire 1 H$ a $end
$var wire 1 I$ b $end
$var wire 1 J$ cin $end
$var wire 1 K$ cout $end
$var wire 1 L$ sum $end
$upscope $end
$scope module add4 $end
$var wire 1 M$ a $end
$var wire 1 N$ b $end
$var wire 1 O$ cin $end
$var wire 1 P$ cout $end
$var wire 1 Q$ sum $end
$upscope $end
$scope module add5 $end
$var wire 1 R$ a $end
$var wire 1 S$ b $end
$var wire 1 T$ cin $end
$var wire 1 U$ cout $end
$var wire 1 V$ sum $end
$upscope $end
$scope module add6 $end
$var wire 1 W$ a $end
$var wire 1 X$ b $end
$var wire 1 Y$ cin $end
$var wire 1 Z$ cout $end
$var wire 1 [$ sum $end
$upscope $end
$scope module add7 $end
$var wire 1 \$ a $end
$var wire 1 ]$ b $end
$var wire 1 ^$ cin $end
$var wire 1 _$ cout $end
$var wire 1 `$ sum $end
$upscope $end
$scope module add8 $end
$var wire 1 a$ a $end
$var wire 1 b$ b $end
$var wire 1 c$ cin $end
$var wire 1 d$ cout $end
$var wire 1 e$ sum $end
$upscope $end
$scope module add9 $end
$var wire 1 f$ a $end
$var wire 1 g$ b $end
$var wire 1 h$ cin $end
$var wire 1 i$ cout $end
$var wire 1 j$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module sub $end
$var wire 32 k$ a [31:0] $end
$var wire 32 l$ b [31:0] $end
$var wire 1 m$ f_cin $end
$var wire 32 n$ result [31:0] $end
$var wire 32 o$ carry [31:0] $end
$scope module add0 $end
$var wire 1 p$ a $end
$var wire 1 q$ b $end
$var wire 1 m$ cin $end
$var wire 1 r$ cout $end
$var wire 1 s$ sum $end
$upscope $end
$scope module add1 $end
$var wire 1 t$ a $end
$var wire 1 u$ b $end
$var wire 1 v$ cin $end
$var wire 1 w$ cout $end
$var wire 1 x$ sum $end
$upscope $end
$scope module add10 $end
$var wire 1 y$ a $end
$var wire 1 z$ b $end
$var wire 1 {$ cin $end
$var wire 1 |$ cout $end
$var wire 1 }$ sum $end
$upscope $end
$scope module add11 $end
$var wire 1 ~$ a $end
$var wire 1 !% b $end
$var wire 1 "% cin $end
$var wire 1 #% cout $end
$var wire 1 $% sum $end
$upscope $end
$scope module add12 $end
$var wire 1 %% a $end
$var wire 1 &% b $end
$var wire 1 '% cin $end
$var wire 1 (% cout $end
$var wire 1 )% sum $end
$upscope $end
$scope module add13 $end
$var wire 1 *% a $end
$var wire 1 +% b $end
$var wire 1 ,% cin $end
$var wire 1 -% cout $end
$var wire 1 .% sum $end
$upscope $end
$scope module add14 $end
$var wire 1 /% a $end
$var wire 1 0% b $end
$var wire 1 1% cin $end
$var wire 1 2% cout $end
$var wire 1 3% sum $end
$upscope $end
$scope module add15 $end
$var wire 1 4% a $end
$var wire 1 5% b $end
$var wire 1 6% cin $end
$var wire 1 7% cout $end
$var wire 1 8% sum $end
$upscope $end
$scope module add16 $end
$var wire 1 9% a $end
$var wire 1 :% b $end
$var wire 1 ;% cin $end
$var wire 1 <% cout $end
$var wire 1 =% sum $end
$upscope $end
$scope module add17 $end
$var wire 1 >% a $end
$var wire 1 ?% b $end
$var wire 1 @% cin $end
$var wire 1 A% cout $end
$var wire 1 B% sum $end
$upscope $end
$scope module add18 $end
$var wire 1 C% a $end
$var wire 1 D% b $end
$var wire 1 E% cin $end
$var wire 1 F% cout $end
$var wire 1 G% sum $end
$upscope $end
$scope module add19 $end
$var wire 1 H% a $end
$var wire 1 I% b $end
$var wire 1 J% cin $end
$var wire 1 K% cout $end
$var wire 1 L% sum $end
$upscope $end
$scope module add2 $end
$var wire 1 M% a $end
$var wire 1 N% b $end
$var wire 1 O% cin $end
$var wire 1 P% cout $end
$var wire 1 Q% sum $end
$upscope $end
$scope module add20 $end
$var wire 1 R% a $end
$var wire 1 S% b $end
$var wire 1 T% cin $end
$var wire 1 U% cout $end
$var wire 1 V% sum $end
$upscope $end
$scope module add21 $end
$var wire 1 W% a $end
$var wire 1 X% b $end
$var wire 1 Y% cin $end
$var wire 1 Z% cout $end
$var wire 1 [% sum $end
$upscope $end
$scope module add22 $end
$var wire 1 \% a $end
$var wire 1 ]% b $end
$var wire 1 ^% cin $end
$var wire 1 _% cout $end
$var wire 1 `% sum $end
$upscope $end
$scope module add23 $end
$var wire 1 a% a $end
$var wire 1 b% b $end
$var wire 1 c% cin $end
$var wire 1 d% cout $end
$var wire 1 e% sum $end
$upscope $end
$scope module add24 $end
$var wire 1 f% a $end
$var wire 1 g% b $end
$var wire 1 h% cin $end
$var wire 1 i% cout $end
$var wire 1 j% sum $end
$upscope $end
$scope module add25 $end
$var wire 1 k% a $end
$var wire 1 l% b $end
$var wire 1 m% cin $end
$var wire 1 n% cout $end
$var wire 1 o% sum $end
$upscope $end
$scope module add26 $end
$var wire 1 p% a $end
$var wire 1 q% b $end
$var wire 1 r% cin $end
$var wire 1 s% cout $end
$var wire 1 t% sum $end
$upscope $end
$scope module add27 $end
$var wire 1 u% a $end
$var wire 1 v% b $end
$var wire 1 w% cin $end
$var wire 1 x% cout $end
$var wire 1 y% sum $end
$upscope $end
$scope module add28 $end
$var wire 1 z% a $end
$var wire 1 {% b $end
$var wire 1 |% cin $end
$var wire 1 }% cout $end
$var wire 1 ~% sum $end
$upscope $end
$scope module add29 $end
$var wire 1 !& a $end
$var wire 1 "& b $end
$var wire 1 #& cin $end
$var wire 1 $& cout $end
$var wire 1 %& sum $end
$upscope $end
$scope module add3 $end
$var wire 1 && a $end
$var wire 1 '& b $end
$var wire 1 (& cin $end
$var wire 1 )& cout $end
$var wire 1 *& sum $end
$upscope $end
$scope module add30 $end
$var wire 1 +& a $end
$var wire 1 ,& b $end
$var wire 1 -& cin $end
$var wire 1 .& cout $end
$var wire 1 /& sum $end
$upscope $end
$scope module add31 $end
$var wire 1 0& a $end
$var wire 1 1& b $end
$var wire 1 2& cin $end
$var wire 1 3& cout $end
$var wire 1 4& sum $end
$upscope $end
$scope module add4 $end
$var wire 1 5& a $end
$var wire 1 6& b $end
$var wire 1 7& cin $end
$var wire 1 8& cout $end
$var wire 1 9& sum $end
$upscope $end
$scope module add5 $end
$var wire 1 :& a $end
$var wire 1 ;& b $end
$var wire 1 <& cin $end
$var wire 1 =& cout $end
$var wire 1 >& sum $end
$upscope $end
$scope module add6 $end
$var wire 1 ?& a $end
$var wire 1 @& b $end
$var wire 1 A& cin $end
$var wire 1 B& cout $end
$var wire 1 C& sum $end
$upscope $end
$scope module add7 $end
$var wire 1 D& a $end
$var wire 1 E& b $end
$var wire 1 F& cin $end
$var wire 1 G& cout $end
$var wire 1 H& sum $end
$upscope $end
$scope module add8 $end
$var wire 1 I& a $end
$var wire 1 J& b $end
$var wire 1 K& cin $end
$var wire 1 L& cout $end
$var wire 1 M& sum $end
$upscope $end
$scope module add9 $end
$var wire 1 N& a $end
$var wire 1 O& b $end
$var wire 1 P& cin $end
$var wire 1 Q& cout $end
$var wire 1 R& sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module bne_ $end
$var wire 32 S& bne_a [31:0] $end
$var wire 32 T& bne_b [31:0] $end
$var wire 32 U& result_bne [31:0] $end
$var wire 32 V& bne_comp [31:0] $end
$scope module sub $end
$var wire 32 W& a [31:0] $end
$var wire 32 X& b [31:0] $end
$var wire 1 Y& f_cin $end
$var wire 32 Z& result [31:0] $end
$var wire 32 [& carry [31:0] $end
$scope module add0 $end
$var wire 1 \& a $end
$var wire 1 ]& b $end
$var wire 1 Y& cin $end
$var wire 1 ^& cout $end
$var wire 1 _& sum $end
$upscope $end
$scope module add1 $end
$var wire 1 `& a $end
$var wire 1 a& b $end
$var wire 1 b& cin $end
$var wire 1 c& cout $end
$var wire 1 d& sum $end
$upscope $end
$scope module add10 $end
$var wire 1 e& a $end
$var wire 1 f& b $end
$var wire 1 g& cin $end
$var wire 1 h& cout $end
$var wire 1 i& sum $end
$upscope $end
$scope module add11 $end
$var wire 1 j& a $end
$var wire 1 k& b $end
$var wire 1 l& cin $end
$var wire 1 m& cout $end
$var wire 1 n& sum $end
$upscope $end
$scope module add12 $end
$var wire 1 o& a $end
$var wire 1 p& b $end
$var wire 1 q& cin $end
$var wire 1 r& cout $end
$var wire 1 s& sum $end
$upscope $end
$scope module add13 $end
$var wire 1 t& a $end
$var wire 1 u& b $end
$var wire 1 v& cin $end
$var wire 1 w& cout $end
$var wire 1 x& sum $end
$upscope $end
$scope module add14 $end
$var wire 1 y& a $end
$var wire 1 z& b $end
$var wire 1 {& cin $end
$var wire 1 |& cout $end
$var wire 1 }& sum $end
$upscope $end
$scope module add15 $end
$var wire 1 ~& a $end
$var wire 1 !' b $end
$var wire 1 "' cin $end
$var wire 1 #' cout $end
$var wire 1 $' sum $end
$upscope $end
$scope module add16 $end
$var wire 1 %' a $end
$var wire 1 &' b $end
$var wire 1 '' cin $end
$var wire 1 (' cout $end
$var wire 1 )' sum $end
$upscope $end
$scope module add17 $end
$var wire 1 *' a $end
$var wire 1 +' b $end
$var wire 1 ,' cin $end
$var wire 1 -' cout $end
$var wire 1 .' sum $end
$upscope $end
$scope module add18 $end
$var wire 1 /' a $end
$var wire 1 0' b $end
$var wire 1 1' cin $end
$var wire 1 2' cout $end
$var wire 1 3' sum $end
$upscope $end
$scope module add19 $end
$var wire 1 4' a $end
$var wire 1 5' b $end
$var wire 1 6' cin $end
$var wire 1 7' cout $end
$var wire 1 8' sum $end
$upscope $end
$scope module add2 $end
$var wire 1 9' a $end
$var wire 1 :' b $end
$var wire 1 ;' cin $end
$var wire 1 <' cout $end
$var wire 1 =' sum $end
$upscope $end
$scope module add20 $end
$var wire 1 >' a $end
$var wire 1 ?' b $end
$var wire 1 @' cin $end
$var wire 1 A' cout $end
$var wire 1 B' sum $end
$upscope $end
$scope module add21 $end
$var wire 1 C' a $end
$var wire 1 D' b $end
$var wire 1 E' cin $end
$var wire 1 F' cout $end
$var wire 1 G' sum $end
$upscope $end
$scope module add22 $end
$var wire 1 H' a $end
$var wire 1 I' b $end
$var wire 1 J' cin $end
$var wire 1 K' cout $end
$var wire 1 L' sum $end
$upscope $end
$scope module add23 $end
$var wire 1 M' a $end
$var wire 1 N' b $end
$var wire 1 O' cin $end
$var wire 1 P' cout $end
$var wire 1 Q' sum $end
$upscope $end
$scope module add24 $end
$var wire 1 R' a $end
$var wire 1 S' b $end
$var wire 1 T' cin $end
$var wire 1 U' cout $end
$var wire 1 V' sum $end
$upscope $end
$scope module add25 $end
$var wire 1 W' a $end
$var wire 1 X' b $end
$var wire 1 Y' cin $end
$var wire 1 Z' cout $end
$var wire 1 [' sum $end
$upscope $end
$scope module add26 $end
$var wire 1 \' a $end
$var wire 1 ]' b $end
$var wire 1 ^' cin $end
$var wire 1 _' cout $end
$var wire 1 `' sum $end
$upscope $end
$scope module add27 $end
$var wire 1 a' a $end
$var wire 1 b' b $end
$var wire 1 c' cin $end
$var wire 1 d' cout $end
$var wire 1 e' sum $end
$upscope $end
$scope module add28 $end
$var wire 1 f' a $end
$var wire 1 g' b $end
$var wire 1 h' cin $end
$var wire 1 i' cout $end
$var wire 1 j' sum $end
$upscope $end
$scope module add29 $end
$var wire 1 k' a $end
$var wire 1 l' b $end
$var wire 1 m' cin $end
$var wire 1 n' cout $end
$var wire 1 o' sum $end
$upscope $end
$scope module add3 $end
$var wire 1 p' a $end
$var wire 1 q' b $end
$var wire 1 r' cin $end
$var wire 1 s' cout $end
$var wire 1 t' sum $end
$upscope $end
$scope module add30 $end
$var wire 1 u' a $end
$var wire 1 v' b $end
$var wire 1 w' cin $end
$var wire 1 x' cout $end
$var wire 1 y' sum $end
$upscope $end
$scope module add31 $end
$var wire 1 z' a $end
$var wire 1 {' b $end
$var wire 1 |' cin $end
$var wire 1 }' cout $end
$var wire 1 ~' sum $end
$upscope $end
$scope module add4 $end
$var wire 1 !( a $end
$var wire 1 "( b $end
$var wire 1 #( cin $end
$var wire 1 $( cout $end
$var wire 1 %( sum $end
$upscope $end
$scope module add5 $end
$var wire 1 &( a $end
$var wire 1 '( b $end
$var wire 1 (( cin $end
$var wire 1 )( cout $end
$var wire 1 *( sum $end
$upscope $end
$scope module add6 $end
$var wire 1 +( a $end
$var wire 1 ,( b $end
$var wire 1 -( cin $end
$var wire 1 .( cout $end
$var wire 1 /( sum $end
$upscope $end
$scope module add7 $end
$var wire 1 0( a $end
$var wire 1 1( b $end
$var wire 1 2( cin $end
$var wire 1 3( cout $end
$var wire 1 4( sum $end
$upscope $end
$scope module add8 $end
$var wire 1 5( a $end
$var wire 1 6( b $end
$var wire 1 7( cin $end
$var wire 1 8( cout $end
$var wire 1 9( sum $end
$upscope $end
$scope module add9 $end
$var wire 1 :( a $end
$var wire 1 ;( b $end
$var wire 1 <( cin $end
$var wire 1 =( cout $end
$var wire 1 >( sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module flopenr $end
$var wire 1 ?( clk $end
$var wire 8 @( d [7:0] $end
$var wire 1 A( en $end
$var wire 1 B( reset $end
$var reg 8 C( q [7:0] $end
$upscope $end
$scope module testbench $end
$var wire 32 D( writedata [31:0] $end
$var wire 1 E( memwrite $end
$var wire 32 F( dataadr [31:0] $end
$var reg 1 G( clk $end
$var reg 1 H( reset $end
$scope module dut $end
$var wire 1 G( clk $end
$var wire 1 H( reset $end
$var wire 32 I( writedata [31:0] $end
$var wire 32 J( readdata [31:0] $end
$var wire 32 K( pc [31:0] $end
$var wire 1 E( memwrite $end
$var wire 32 L( instr [31:0] $end
$var wire 32 M( dataadr [31:0] $end
$scope module dmem $end
$var wire 1 G( clk $end
$var wire 32 N( rd [31:0] $end
$var wire 1 E( we $end
$var wire 32 O( wd [31:0] $end
$var wire 32 P( a [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 Q( a [5:0] $end
$var wire 32 R( rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 G( clk $end
$var wire 32 S( instr [31:0] $end
$var wire 32 T( readdata [31:0] $end
$var wire 1 H( reset $end
$var wire 1 U( zero $end
$var wire 32 V( writedata [31:0] $end
$var wire 1 W( regwrite $end
$var wire 1 X( regdst $end
$var wire 1 Y( pcsrc $end
$var wire 32 Z( pc [31:0] $end
$var wire 1 E( memwrite $end
$var wire 1 [( memtoreg $end
$var wire 1 \( jump $end
$var wire 1 ]( alusrc $end
$var wire 32 ^( aluout [31:0] $end
$var wire 3 _( alucontrol [2:0] $end
$scope module c $end
$var wire 6 `( funct [5:0] $end
$var wire 6 a( op [5:0] $end
$var wire 1 Y( pcsrc $end
$var wire 1 U( zero $end
$var wire 1 W( regwrite $end
$var wire 1 X( regdst $end
$var wire 1 E( memwrite $end
$var wire 1 [( memtoreg $end
$var wire 1 \( jump $end
$var wire 1 b( branch $end
$var wire 1 ]( alusrc $end
$var wire 2 c( aluop [1:0] $end
$var wire 3 d( alucontrol [2:0] $end
$scope module ad $end
$var wire 6 e( funct [5:0] $end
$var wire 2 f( aluop [1:0] $end
$var reg 3 g( alucontrol [2:0] $end
$upscope $end
$scope module md $end
$var wire 6 h( op [5:0] $end
$var wire 1 W( regwrite $end
$var wire 1 X( regdst $end
$var wire 1 E( memwrite $end
$var wire 1 [( memtoreg $end
$var wire 1 \( jump $end
$var wire 1 b( branch $end
$var wire 1 ]( alusrc $end
$var wire 2 i( aluop [1:0] $end
$var reg 9 j( controls [8:0] $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 3 k( alucontrol [2:0] $end
$var wire 1 ]( alusrc $end
$var wire 1 G( clk $end
$var wire 32 l( instr [31:0] $end
$var wire 1 \( jump $end
$var wire 1 [( memtoreg $end
$var wire 1 Y( pcsrc $end
$var wire 32 m( readdata [31:0] $end
$var wire 1 X( regdst $end
$var wire 1 W( regwrite $end
$var wire 1 H( reset $end
$var wire 1 U( zero $end
$var wire 5 n( writereg [4:0] $end
$var wire 32 o( writedata [31:0] $end
$var wire 32 p( srcb [31:0] $end
$var wire 32 q( srca [31:0] $end
$var wire 32 r( signimmsh [31:0] $end
$var wire 32 s( signimm [31:0] $end
$var wire 32 t( result [31:0] $end
$var wire 32 u( pcplus4 [31:0] $end
$var wire 32 v( pcnextbr [31:0] $end
$var wire 32 w( pcnext [31:0] $end
$var wire 32 x( pcbranch [31:0] $end
$var wire 32 y( pc [31:0] $end
$var wire 32 z( aluout [31:0] $end
$scope module alu $end
$var wire 3 {( f [2:0] $end
$var wire 32 |( result_sub [31:0] $end
$var wire 32 }( result_slt [31:0] $end
$var wire 32 ~( result_or [31:0] $end
$var wire 32 !) result_and [31:0] $end
$var wire 32 ") result_add [31:0] $end
$var wire 32 #) b [31:0] $end
$var wire 32 $) a [31:0] $end
$var reg 32 %) y [31:0] $end
$var reg 1 U( zero $end
$scope module add $end
$var wire 1 &) f_cin $end
$var wire 32 ') result [31:0] $end
$var wire 32 () carry [31:0] $end
$var wire 32 )) b [31:0] $end
$var wire 32 *) a [31:0] $end
$scope module add0 $end
$var wire 1 +) a $end
$var wire 1 ,) b $end
$var wire 1 &) cin $end
$var wire 1 -) cout $end
$var wire 1 .) sum $end
$upscope $end
$scope module add1 $end
$var wire 1 /) a $end
$var wire 1 0) b $end
$var wire 1 1) cin $end
$var wire 1 2) cout $end
$var wire 1 3) sum $end
$upscope $end
$scope module add10 $end
$var wire 1 4) a $end
$var wire 1 5) b $end
$var wire 1 6) cin $end
$var wire 1 7) cout $end
$var wire 1 8) sum $end
$upscope $end
$scope module add11 $end
$var wire 1 9) a $end
$var wire 1 :) b $end
$var wire 1 ;) cin $end
$var wire 1 <) cout $end
$var wire 1 =) sum $end
$upscope $end
$scope module add12 $end
$var wire 1 >) a $end
$var wire 1 ?) b $end
$var wire 1 @) cin $end
$var wire 1 A) cout $end
$var wire 1 B) sum $end
$upscope $end
$scope module add13 $end
$var wire 1 C) a $end
$var wire 1 D) b $end
$var wire 1 E) cin $end
$var wire 1 F) cout $end
$var wire 1 G) sum $end
$upscope $end
$scope module add14 $end
$var wire 1 H) a $end
$var wire 1 I) b $end
$var wire 1 J) cin $end
$var wire 1 K) cout $end
$var wire 1 L) sum $end
$upscope $end
$scope module add15 $end
$var wire 1 M) a $end
$var wire 1 N) b $end
$var wire 1 O) cin $end
$var wire 1 P) cout $end
$var wire 1 Q) sum $end
$upscope $end
$scope module add16 $end
$var wire 1 R) a $end
$var wire 1 S) b $end
$var wire 1 T) cin $end
$var wire 1 U) cout $end
$var wire 1 V) sum $end
$upscope $end
$scope module add17 $end
$var wire 1 W) a $end
$var wire 1 X) b $end
$var wire 1 Y) cin $end
$var wire 1 Z) cout $end
$var wire 1 [) sum $end
$upscope $end
$scope module add18 $end
$var wire 1 \) a $end
$var wire 1 ]) b $end
$var wire 1 ^) cin $end
$var wire 1 _) cout $end
$var wire 1 `) sum $end
$upscope $end
$scope module add19 $end
$var wire 1 a) a $end
$var wire 1 b) b $end
$var wire 1 c) cin $end
$var wire 1 d) cout $end
$var wire 1 e) sum $end
$upscope $end
$scope module add2 $end
$var wire 1 f) a $end
$var wire 1 g) b $end
$var wire 1 h) cin $end
$var wire 1 i) cout $end
$var wire 1 j) sum $end
$upscope $end
$scope module add20 $end
$var wire 1 k) a $end
$var wire 1 l) b $end
$var wire 1 m) cin $end
$var wire 1 n) cout $end
$var wire 1 o) sum $end
$upscope $end
$scope module add21 $end
$var wire 1 p) a $end
$var wire 1 q) b $end
$var wire 1 r) cin $end
$var wire 1 s) cout $end
$var wire 1 t) sum $end
$upscope $end
$scope module add22 $end
$var wire 1 u) a $end
$var wire 1 v) b $end
$var wire 1 w) cin $end
$var wire 1 x) cout $end
$var wire 1 y) sum $end
$upscope $end
$scope module add23 $end
$var wire 1 z) a $end
$var wire 1 {) b $end
$var wire 1 |) cin $end
$var wire 1 }) cout $end
$var wire 1 ~) sum $end
$upscope $end
$scope module add24 $end
$var wire 1 !* a $end
$var wire 1 "* b $end
$var wire 1 #* cin $end
$var wire 1 $* cout $end
$var wire 1 %* sum $end
$upscope $end
$scope module add25 $end
$var wire 1 &* a $end
$var wire 1 '* b $end
$var wire 1 (* cin $end
$var wire 1 )* cout $end
$var wire 1 ** sum $end
$upscope $end
$scope module add26 $end
$var wire 1 +* a $end
$var wire 1 ,* b $end
$var wire 1 -* cin $end
$var wire 1 .* cout $end
$var wire 1 /* sum $end
$upscope $end
$scope module add27 $end
$var wire 1 0* a $end
$var wire 1 1* b $end
$var wire 1 2* cin $end
$var wire 1 3* cout $end
$var wire 1 4* sum $end
$upscope $end
$scope module add28 $end
$var wire 1 5* a $end
$var wire 1 6* b $end
$var wire 1 7* cin $end
$var wire 1 8* cout $end
$var wire 1 9* sum $end
$upscope $end
$scope module add29 $end
$var wire 1 :* a $end
$var wire 1 ;* b $end
$var wire 1 <* cin $end
$var wire 1 =* cout $end
$var wire 1 >* sum $end
$upscope $end
$scope module add3 $end
$var wire 1 ?* a $end
$var wire 1 @* b $end
$var wire 1 A* cin $end
$var wire 1 B* cout $end
$var wire 1 C* sum $end
$upscope $end
$scope module add30 $end
$var wire 1 D* a $end
$var wire 1 E* b $end
$var wire 1 F* cin $end
$var wire 1 G* cout $end
$var wire 1 H* sum $end
$upscope $end
$scope module add31 $end
$var wire 1 I* a $end
$var wire 1 J* b $end
$var wire 1 K* cin $end
$var wire 1 L* cout $end
$var wire 1 M* sum $end
$upscope $end
$scope module add4 $end
$var wire 1 N* a $end
$var wire 1 O* b $end
$var wire 1 P* cin $end
$var wire 1 Q* cout $end
$var wire 1 R* sum $end
$upscope $end
$scope module add5 $end
$var wire 1 S* a $end
$var wire 1 T* b $end
$var wire 1 U* cin $end
$var wire 1 V* cout $end
$var wire 1 W* sum $end
$upscope $end
$scope module add6 $end
$var wire 1 X* a $end
$var wire 1 Y* b $end
$var wire 1 Z* cin $end
$var wire 1 [* cout $end
$var wire 1 \* sum $end
$upscope $end
$scope module add7 $end
$var wire 1 ]* a $end
$var wire 1 ^* b $end
$var wire 1 _* cin $end
$var wire 1 `* cout $end
$var wire 1 a* sum $end
$upscope $end
$scope module add8 $end
$var wire 1 b* a $end
$var wire 1 c* b $end
$var wire 1 d* cin $end
$var wire 1 e* cout $end
$var wire 1 f* sum $end
$upscope $end
$scope module add9 $end
$var wire 1 g* a $end
$var wire 1 h* b $end
$var wire 1 i* cin $end
$var wire 1 j* cout $end
$var wire 1 k* sum $end
$upscope $end
$upscope $end
$scope module logic_and $end
$var wire 32 l* result_and [31:0] $end
$var wire 32 m* and_b [31:0] $end
$var wire 32 n* and_a [31:0] $end
$upscope $end
$scope module logic_or $end
$var wire 32 o* result_or [31:0] $end
$var wire 32 p* or_b [31:0] $end
$var wire 32 q* or_a [31:0] $end
$upscope $end
$scope module slt $end
$var wire 32 r* result_slt [31:0] $end
$var wire 32 s* slt_comp [31:0] $end
$var wire 32 t* slt_b [31:0] $end
$var wire 32 u* slt_a [31:0] $end
$var wire 32 v* result [31:0] $end
$scope module extsl $end
$var wire 1 w* src $end
$var wire 32 x* out [31:0] $end
$var wire 33 y* ext [32:0] $end
$upscope $end
$scope module slt $end
$var wire 32 z* b [31:0] $end
$var wire 1 {* f_cin $end
$var wire 32 |* result [31:0] $end
$var wire 32 }* carry [31:0] $end
$var wire 32 ~* a [31:0] $end
$scope module add0 $end
$var wire 1 !+ a $end
$var wire 1 "+ b $end
$var wire 1 {* cin $end
$var wire 1 #+ cout $end
$var wire 1 $+ sum $end
$upscope $end
$scope module add1 $end
$var wire 1 %+ a $end
$var wire 1 &+ b $end
$var wire 1 '+ cin $end
$var wire 1 (+ cout $end
$var wire 1 )+ sum $end
$upscope $end
$scope module add10 $end
$var wire 1 *+ a $end
$var wire 1 ++ b $end
$var wire 1 ,+ cin $end
$var wire 1 -+ cout $end
$var wire 1 .+ sum $end
$upscope $end
$scope module add11 $end
$var wire 1 /+ a $end
$var wire 1 0+ b $end
$var wire 1 1+ cin $end
$var wire 1 2+ cout $end
$var wire 1 3+ sum $end
$upscope $end
$scope module add12 $end
$var wire 1 4+ a $end
$var wire 1 5+ b $end
$var wire 1 6+ cin $end
$var wire 1 7+ cout $end
$var wire 1 8+ sum $end
$upscope $end
$scope module add13 $end
$var wire 1 9+ a $end
$var wire 1 :+ b $end
$var wire 1 ;+ cin $end
$var wire 1 <+ cout $end
$var wire 1 =+ sum $end
$upscope $end
$scope module add14 $end
$var wire 1 >+ a $end
$var wire 1 ?+ b $end
$var wire 1 @+ cin $end
$var wire 1 A+ cout $end
$var wire 1 B+ sum $end
$upscope $end
$scope module add15 $end
$var wire 1 C+ a $end
$var wire 1 D+ b $end
$var wire 1 E+ cin $end
$var wire 1 F+ cout $end
$var wire 1 G+ sum $end
$upscope $end
$scope module add16 $end
$var wire 1 H+ a $end
$var wire 1 I+ b $end
$var wire 1 J+ cin $end
$var wire 1 K+ cout $end
$var wire 1 L+ sum $end
$upscope $end
$scope module add17 $end
$var wire 1 M+ a $end
$var wire 1 N+ b $end
$var wire 1 O+ cin $end
$var wire 1 P+ cout $end
$var wire 1 Q+ sum $end
$upscope $end
$scope module add18 $end
$var wire 1 R+ a $end
$var wire 1 S+ b $end
$var wire 1 T+ cin $end
$var wire 1 U+ cout $end
$var wire 1 V+ sum $end
$upscope $end
$scope module add19 $end
$var wire 1 W+ a $end
$var wire 1 X+ b $end
$var wire 1 Y+ cin $end
$var wire 1 Z+ cout $end
$var wire 1 [+ sum $end
$upscope $end
$scope module add2 $end
$var wire 1 \+ a $end
$var wire 1 ]+ b $end
$var wire 1 ^+ cin $end
$var wire 1 _+ cout $end
$var wire 1 `+ sum $end
$upscope $end
$scope module add20 $end
$var wire 1 a+ a $end
$var wire 1 b+ b $end
$var wire 1 c+ cin $end
$var wire 1 d+ cout $end
$var wire 1 e+ sum $end
$upscope $end
$scope module add21 $end
$var wire 1 f+ a $end
$var wire 1 g+ b $end
$var wire 1 h+ cin $end
$var wire 1 i+ cout $end
$var wire 1 j+ sum $end
$upscope $end
$scope module add22 $end
$var wire 1 k+ a $end
$var wire 1 l+ b $end
$var wire 1 m+ cin $end
$var wire 1 n+ cout $end
$var wire 1 o+ sum $end
$upscope $end
$scope module add23 $end
$var wire 1 p+ a $end
$var wire 1 q+ b $end
$var wire 1 r+ cin $end
$var wire 1 s+ cout $end
$var wire 1 t+ sum $end
$upscope $end
$scope module add24 $end
$var wire 1 u+ a $end
$var wire 1 v+ b $end
$var wire 1 w+ cin $end
$var wire 1 x+ cout $end
$var wire 1 y+ sum $end
$upscope $end
$scope module add25 $end
$var wire 1 z+ a $end
$var wire 1 {+ b $end
$var wire 1 |+ cin $end
$var wire 1 }+ cout $end
$var wire 1 ~+ sum $end
$upscope $end
$scope module add26 $end
$var wire 1 !, a $end
$var wire 1 ", b $end
$var wire 1 #, cin $end
$var wire 1 $, cout $end
$var wire 1 %, sum $end
$upscope $end
$scope module add27 $end
$var wire 1 &, a $end
$var wire 1 ', b $end
$var wire 1 (, cin $end
$var wire 1 ), cout $end
$var wire 1 *, sum $end
$upscope $end
$scope module add28 $end
$var wire 1 +, a $end
$var wire 1 ,, b $end
$var wire 1 -, cin $end
$var wire 1 ., cout $end
$var wire 1 /, sum $end
$upscope $end
$scope module add29 $end
$var wire 1 0, a $end
$var wire 1 1, b $end
$var wire 1 2, cin $end
$var wire 1 3, cout $end
$var wire 1 4, sum $end
$upscope $end
$scope module add3 $end
$var wire 1 5, a $end
$var wire 1 6, b $end
$var wire 1 7, cin $end
$var wire 1 8, cout $end
$var wire 1 9, sum $end
$upscope $end
$scope module add30 $end
$var wire 1 :, a $end
$var wire 1 ;, b $end
$var wire 1 <, cin $end
$var wire 1 =, cout $end
$var wire 1 >, sum $end
$upscope $end
$scope module add31 $end
$var wire 1 ?, a $end
$var wire 1 @, b $end
$var wire 1 A, cin $end
$var wire 1 B, cout $end
$var wire 1 C, sum $end
$upscope $end
$scope module add4 $end
$var wire 1 D, a $end
$var wire 1 E, b $end
$var wire 1 F, cin $end
$var wire 1 G, cout $end
$var wire 1 H, sum $end
$upscope $end
$scope module add5 $end
$var wire 1 I, a $end
$var wire 1 J, b $end
$var wire 1 K, cin $end
$var wire 1 L, cout $end
$var wire 1 M, sum $end
$upscope $end
$scope module add6 $end
$var wire 1 N, a $end
$var wire 1 O, b $end
$var wire 1 P, cin $end
$var wire 1 Q, cout $end
$var wire 1 R, sum $end
$upscope $end
$scope module add7 $end
$var wire 1 S, a $end
$var wire 1 T, b $end
$var wire 1 U, cin $end
$var wire 1 V, cout $end
$var wire 1 W, sum $end
$upscope $end
$scope module add8 $end
$var wire 1 X, a $end
$var wire 1 Y, b $end
$var wire 1 Z, cin $end
$var wire 1 [, cout $end
$var wire 1 \, sum $end
$upscope $end
$scope module add9 $end
$var wire 1 ], a $end
$var wire 1 ^, b $end
$var wire 1 _, cin $end
$var wire 1 `, cout $end
$var wire 1 a, sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module sub $end
$var wire 32 b, b [31:0] $end
$var wire 1 c, f_cin $end
$var wire 32 d, result [31:0] $end
$var wire 32 e, carry [31:0] $end
$var wire 32 f, a [31:0] $end
$scope module add0 $end
$var wire 1 g, a $end
$var wire 1 h, b $end
$var wire 1 c, cin $end
$var wire 1 i, cout $end
$var wire 1 j, sum $end
$upscope $end
$scope module add1 $end
$var wire 1 k, a $end
$var wire 1 l, b $end
$var wire 1 m, cin $end
$var wire 1 n, cout $end
$var wire 1 o, sum $end
$upscope $end
$scope module add10 $end
$var wire 1 p, a $end
$var wire 1 q, b $end
$var wire 1 r, cin $end
$var wire 1 s, cout $end
$var wire 1 t, sum $end
$upscope $end
$scope module add11 $end
$var wire 1 u, a $end
$var wire 1 v, b $end
$var wire 1 w, cin $end
$var wire 1 x, cout $end
$var wire 1 y, sum $end
$upscope $end
$scope module add12 $end
$var wire 1 z, a $end
$var wire 1 {, b $end
$var wire 1 |, cin $end
$var wire 1 }, cout $end
$var wire 1 ~, sum $end
$upscope $end
$scope module add13 $end
$var wire 1 !- a $end
$var wire 1 "- b $end
$var wire 1 #- cin $end
$var wire 1 $- cout $end
$var wire 1 %- sum $end
$upscope $end
$scope module add14 $end
$var wire 1 &- a $end
$var wire 1 '- b $end
$var wire 1 (- cin $end
$var wire 1 )- cout $end
$var wire 1 *- sum $end
$upscope $end
$scope module add15 $end
$var wire 1 +- a $end
$var wire 1 ,- b $end
$var wire 1 -- cin $end
$var wire 1 .- cout $end
$var wire 1 /- sum $end
$upscope $end
$scope module add16 $end
$var wire 1 0- a $end
$var wire 1 1- b $end
$var wire 1 2- cin $end
$var wire 1 3- cout $end
$var wire 1 4- sum $end
$upscope $end
$scope module add17 $end
$var wire 1 5- a $end
$var wire 1 6- b $end
$var wire 1 7- cin $end
$var wire 1 8- cout $end
$var wire 1 9- sum $end
$upscope $end
$scope module add18 $end
$var wire 1 :- a $end
$var wire 1 ;- b $end
$var wire 1 <- cin $end
$var wire 1 =- cout $end
$var wire 1 >- sum $end
$upscope $end
$scope module add19 $end
$var wire 1 ?- a $end
$var wire 1 @- b $end
$var wire 1 A- cin $end
$var wire 1 B- cout $end
$var wire 1 C- sum $end
$upscope $end
$scope module add2 $end
$var wire 1 D- a $end
$var wire 1 E- b $end
$var wire 1 F- cin $end
$var wire 1 G- cout $end
$var wire 1 H- sum $end
$upscope $end
$scope module add20 $end
$var wire 1 I- a $end
$var wire 1 J- b $end
$var wire 1 K- cin $end
$var wire 1 L- cout $end
$var wire 1 M- sum $end
$upscope $end
$scope module add21 $end
$var wire 1 N- a $end
$var wire 1 O- b $end
$var wire 1 P- cin $end
$var wire 1 Q- cout $end
$var wire 1 R- sum $end
$upscope $end
$scope module add22 $end
$var wire 1 S- a $end
$var wire 1 T- b $end
$var wire 1 U- cin $end
$var wire 1 V- cout $end
$var wire 1 W- sum $end
$upscope $end
$scope module add23 $end
$var wire 1 X- a $end
$var wire 1 Y- b $end
$var wire 1 Z- cin $end
$var wire 1 [- cout $end
$var wire 1 \- sum $end
$upscope $end
$scope module add24 $end
$var wire 1 ]- a $end
$var wire 1 ^- b $end
$var wire 1 _- cin $end
$var wire 1 `- cout $end
$var wire 1 a- sum $end
$upscope $end
$scope module add25 $end
$var wire 1 b- a $end
$var wire 1 c- b $end
$var wire 1 d- cin $end
$var wire 1 e- cout $end
$var wire 1 f- sum $end
$upscope $end
$scope module add26 $end
$var wire 1 g- a $end
$var wire 1 h- b $end
$var wire 1 i- cin $end
$var wire 1 j- cout $end
$var wire 1 k- sum $end
$upscope $end
$scope module add27 $end
$var wire 1 l- a $end
$var wire 1 m- b $end
$var wire 1 n- cin $end
$var wire 1 o- cout $end
$var wire 1 p- sum $end
$upscope $end
$scope module add28 $end
$var wire 1 q- a $end
$var wire 1 r- b $end
$var wire 1 s- cin $end
$var wire 1 t- cout $end
$var wire 1 u- sum $end
$upscope $end
$scope module add29 $end
$var wire 1 v- a $end
$var wire 1 w- b $end
$var wire 1 x- cin $end
$var wire 1 y- cout $end
$var wire 1 z- sum $end
$upscope $end
$scope module add3 $end
$var wire 1 {- a $end
$var wire 1 |- b $end
$var wire 1 }- cin $end
$var wire 1 ~- cout $end
$var wire 1 !. sum $end
$upscope $end
$scope module add30 $end
$var wire 1 ". a $end
$var wire 1 #. b $end
$var wire 1 $. cin $end
$var wire 1 %. cout $end
$var wire 1 &. sum $end
$upscope $end
$scope module add31 $end
$var wire 1 '. a $end
$var wire 1 (. b $end
$var wire 1 ). cin $end
$var wire 1 *. cout $end
$var wire 1 +. sum $end
$upscope $end
$scope module add4 $end
$var wire 1 ,. a $end
$var wire 1 -. b $end
$var wire 1 .. cin $end
$var wire 1 /. cout $end
$var wire 1 0. sum $end
$upscope $end
$scope module add5 $end
$var wire 1 1. a $end
$var wire 1 2. b $end
$var wire 1 3. cin $end
$var wire 1 4. cout $end
$var wire 1 5. sum $end
$upscope $end
$scope module add6 $end
$var wire 1 6. a $end
$var wire 1 7. b $end
$var wire 1 8. cin $end
$var wire 1 9. cout $end
$var wire 1 :. sum $end
$upscope $end
$scope module add7 $end
$var wire 1 ;. a $end
$var wire 1 <. b $end
$var wire 1 =. cin $end
$var wire 1 >. cout $end
$var wire 1 ?. sum $end
$upscope $end
$scope module add8 $end
$var wire 1 @. a $end
$var wire 1 A. b $end
$var wire 1 B. cin $end
$var wire 1 C. cout $end
$var wire 1 D. sum $end
$upscope $end
$scope module add9 $end
$var wire 1 E. a $end
$var wire 1 F. b $end
$var wire 1 G. cin $end
$var wire 1 H. cout $end
$var wire 1 I. sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module immsh $end
$var wire 32 J. y [31:0] $end
$var wire 32 K. a [31:0] $end
$upscope $end
$scope module pcadd1 $end
$var wire 32 L. b [31:0] $end
$var wire 32 M. y [31:0] $end
$var wire 32 N. a [31:0] $end
$upscope $end
$scope module pcadd2 $end
$var wire 32 O. a [31:0] $end
$var wire 32 P. b [31:0] $end
$var wire 32 Q. y [31:0] $end
$upscope $end
$scope module pcbrmux $end
$var wire 32 R. d0 [31:0] $end
$var wire 32 S. d1 [31:0] $end
$var wire 1 Y( s $end
$var wire 32 T. y [31:0] $end
$upscope $end
$scope module pcmux $end
$var wire 32 U. d0 [31:0] $end
$var wire 32 V. d1 [31:0] $end
$var wire 1 \( s $end
$var wire 32 W. y [31:0] $end
$upscope $end
$scope module pcreg $end
$var wire 1 G( clk $end
$var wire 32 X. d [31:0] $end
$var wire 1 H( reset $end
$var reg 32 Y. q [31:0] $end
$upscope $end
$scope module resmux $end
$var wire 32 Z. d0 [31:0] $end
$var wire 32 [. d1 [31:0] $end
$var wire 1 [( s $end
$var wire 32 \. y [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 G( clk $end
$var wire 5 ]. ra1 [4:0] $end
$var wire 5 ^. ra2 [4:0] $end
$var wire 32 _. wd3 [31:0] $end
$var wire 1 W( we3 $end
$var wire 5 `. wa3 [4:0] $end
$var wire 32 a. rd2 [31:0] $end
$var wire 32 b. rd1 [31:0] $end
$upscope $end
$scope module se $end
$var wire 16 c. a [15:0] $end
$var wire 32 d. y [31:0] $end
$upscope $end
$scope module srcbmux $end
$var wire 32 e. d0 [31:0] $end
$var wire 32 f. d1 [31:0] $end
$var wire 1 ]( s $end
$var wire 32 g. y [31:0] $end
$upscope $end
$scope module wrmux $end
$var wire 5 h. d0 [4:0] $end
$var wire 5 i. d1 [4:0] $end
$var wire 1 X( s $end
$var wire 5 j. y [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module alu_tb $end
$scope module dut $end
$scope module add $end
$scope module add0 $end
$upscope $end
$scope module add1 $end
$upscope $end
$scope module add10 $end
$upscope $end
$scope module add11 $end
$upscope $end
$scope module add12 $end
$upscope $end
$scope module add13 $end
$upscope $end
$scope module add14 $end
$upscope $end
$scope module add15 $end
$upscope $end
$scope module add16 $end
$upscope $end
$scope module add17 $end
$upscope $end
$scope module add18 $end
$upscope $end
$scope module add19 $end
$upscope $end
$scope module add2 $end
$upscope $end
$scope module add20 $end
$upscope $end
$scope module add21 $end
$upscope $end
$scope module add22 $end
$upscope $end
$scope module add23 $end
$upscope $end
$scope module add24 $end
$upscope $end
$scope module add25 $end
$upscope $end
$scope module add26 $end
$upscope $end
$scope module add27 $end
$upscope $end
$scope module add28 $end
$upscope $end
$scope module add29 $end
$upscope $end
$scope module add3 $end
$upscope $end
$scope module add30 $end
$upscope $end
$scope module add31 $end
$upscope $end
$scope module add4 $end
$upscope $end
$scope module add5 $end
$upscope $end
$scope module add6 $end
$upscope $end
$scope module add7 $end
$upscope $end
$scope module add8 $end
$upscope $end
$scope module add9 $end
$upscope $end
$upscope $end
$scope module logic_and $end
$upscope $end
$scope module logic_or $end
$upscope $end
$scope module slt $end
$scope module extsl $end
$upscope $end
$scope module slt $end
$scope module add0 $end
$upscope $end
$scope module add1 $end
$upscope $end
$scope module add10 $end
$upscope $end
$scope module add11 $end
$upscope $end
$scope module add12 $end
$upscope $end
$scope module add13 $end
$upscope $end
$scope module add14 $end
$upscope $end
$scope module add15 $end
$upscope $end
$scope module add16 $end
$upscope $end
$scope module add17 $end
$upscope $end
$scope module add18 $end
$upscope $end
$scope module add19 $end
$upscope $end
$scope module add2 $end
$upscope $end
$scope module add20 $end
$upscope $end
$scope module add21 $end
$upscope $end
$scope module add22 $end
$upscope $end
$scope module add23 $end
$upscope $end
$scope module add24 $end
$upscope $end
$scope module add25 $end
$upscope $end
$scope module add26 $end
$upscope $end
$scope module add27 $end
$upscope $end
$scope module add28 $end
$upscope $end
$scope module add29 $end
$upscope $end
$scope module add3 $end
$upscope $end
$scope module add30 $end
$upscope $end
$scope module add31 $end
$upscope $end
$scope module add4 $end
$upscope $end
$scope module add5 $end
$upscope $end
$scope module add6 $end
$upscope $end
$scope module add7 $end
$upscope $end
$scope module add8 $end
$upscope $end
$scope module add9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module sub $end
$scope module add0 $end
$upscope $end
$scope module add1 $end
$upscope $end
$scope module add10 $end
$upscope $end
$scope module add11 $end
$upscope $end
$scope module add12 $end
$upscope $end
$scope module add13 $end
$upscope $end
$scope module add14 $end
$upscope $end
$scope module add15 $end
$upscope $end
$scope module add16 $end
$upscope $end
$scope module add17 $end
$upscope $end
$scope module add18 $end
$upscope $end
$scope module add19 $end
$upscope $end
$scope module add2 $end
$upscope $end
$scope module add20 $end
$upscope $end
$scope module add21 $end
$upscope $end
$scope module add22 $end
$upscope $end
$scope module add23 $end
$upscope $end
$scope module add24 $end
$upscope $end
$scope module add25 $end
$upscope $end
$scope module add26 $end
$upscope $end
$scope module add27 $end
$upscope $end
$scope module add28 $end
$upscope $end
$scope module add29 $end
$upscope $end
$scope module add3 $end
$upscope $end
$scope module add30 $end
$upscope $end
$scope module add31 $end
$upscope $end
$scope module add4 $end
$upscope $end
$scope module add5 $end
$upscope $end
$scope module add6 $end
$upscope $end
$scope module add7 $end
$upscope $end
$scope module add8 $end
$upscope $end
$scope module add9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module bne_ $end
$scope module sub $end
$scope module add0 $end
$upscope $end
$scope module add1 $end
$upscope $end
$scope module add10 $end
$upscope $end
$scope module add11 $end
$upscope $end
$scope module add12 $end
$upscope $end
$scope module add13 $end
$upscope $end
$scope module add14 $end
$upscope $end
$scope module add15 $end
$upscope $end
$scope module add16 $end
$upscope $end
$scope module add17 $end
$upscope $end
$scope module add18 $end
$upscope $end
$scope module add19 $end
$upscope $end
$scope module add2 $end
$upscope $end
$scope module add20 $end
$upscope $end
$scope module add21 $end
$upscope $end
$scope module add22 $end
$upscope $end
$scope module add23 $end
$upscope $end
$scope module add24 $end
$upscope $end
$scope module add25 $end
$upscope $end
$scope module add26 $end
$upscope $end
$scope module add27 $end
$upscope $end
$scope module add28 $end
$upscope $end
$scope module add29 $end
$upscope $end
$scope module add3 $end
$upscope $end
$scope module add30 $end
$upscope $end
$scope module add31 $end
$upscope $end
$scope module add4 $end
$upscope $end
$scope module add5 $end
$upscope $end
$scope module add6 $end
$upscope $end
$scope module add7 $end
$upscope $end
$scope module add8 $end
$upscope $end
$scope module add9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module flopenr $end
$upscope $end
$scope module testbench $end
$scope module dut $end
$scope module dmem $end
$upscope $end
$scope module imem $end
$upscope $end
$scope module mips $end
$scope module c $end
$scope module ad $end
$upscope $end
$scope module md $end
$upscope $end
$upscope $end
$scope module dp $end
$scope module alu $end
$scope module add $end
$scope module add0 $end
$upscope $end
$scope module add1 $end
$upscope $end
$scope module add10 $end
$upscope $end
$scope module add11 $end
$upscope $end
$scope module add12 $end
$upscope $end
$scope module add13 $end
$upscope $end
$scope module add14 $end
$upscope $end
$scope module add15 $end
$upscope $end
$scope module add16 $end
$upscope $end
$scope module add17 $end
$upscope $end
$scope module add18 $end
$upscope $end
$scope module add19 $end
$upscope $end
$scope module add2 $end
$upscope $end
$scope module add20 $end
$upscope $end
$scope module add21 $end
$upscope $end
$scope module add22 $end
$upscope $end
$scope module add23 $end
$upscope $end
$scope module add24 $end
$upscope $end
$scope module add25 $end
$upscope $end
$scope module add26 $end
$upscope $end
$scope module add27 $end
$upscope $end
$scope module add28 $end
$upscope $end
$scope module add29 $end
$upscope $end
$scope module add3 $end
$upscope $end
$scope module add30 $end
$upscope $end
$scope module add31 $end
$upscope $end
$scope module add4 $end
$upscope $end
$scope module add5 $end
$upscope $end
$scope module add6 $end
$upscope $end
$scope module add7 $end
$upscope $end
$scope module add8 $end
$upscope $end
$scope module add9 $end
$upscope $end
$upscope $end
$scope module logic_and $end
$upscope $end
$scope module logic_or $end
$upscope $end
$scope module slt $end
$scope module extsl $end
$upscope $end
$scope module slt $end
$scope module add0 $end
$upscope $end
$scope module add1 $end
$upscope $end
$scope module add10 $end
$upscope $end
$scope module add11 $end
$upscope $end
$scope module add12 $end
$upscope $end
$scope module add13 $end
$upscope $end
$scope module add14 $end
$upscope $end
$scope module add15 $end
$upscope $end
$scope module add16 $end
$upscope $end
$scope module add17 $end
$upscope $end
$scope module add18 $end
$upscope $end
$scope module add19 $end
$upscope $end
$scope module add2 $end
$upscope $end
$scope module add20 $end
$upscope $end
$scope module add21 $end
$upscope $end
$scope module add22 $end
$upscope $end
$scope module add23 $end
$upscope $end
$scope module add24 $end
$upscope $end
$scope module add25 $end
$upscope $end
$scope module add26 $end
$upscope $end
$scope module add27 $end
$upscope $end
$scope module add28 $end
$upscope $end
$scope module add29 $end
$upscope $end
$scope module add3 $end
$upscope $end
$scope module add30 $end
$upscope $end
$scope module add31 $end
$upscope $end
$scope module add4 $end
$upscope $end
$scope module add5 $end
$upscope $end
$scope module add6 $end
$upscope $end
$scope module add7 $end
$upscope $end
$scope module add8 $end
$upscope $end
$scope module add9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module sub $end
$scope module add0 $end
$upscope $end
$scope module add1 $end
$upscope $end
$scope module add10 $end
$upscope $end
$scope module add11 $end
$upscope $end
$scope module add12 $end
$upscope $end
$scope module add13 $end
$upscope $end
$scope module add14 $end
$upscope $end
$scope module add15 $end
$upscope $end
$scope module add16 $end
$upscope $end
$scope module add17 $end
$upscope $end
$scope module add18 $end
$upscope $end
$scope module add19 $end
$upscope $end
$scope module add2 $end
$upscope $end
$scope module add20 $end
$upscope $end
$scope module add21 $end
$upscope $end
$scope module add22 $end
$upscope $end
$scope module add23 $end
$upscope $end
$scope module add24 $end
$upscope $end
$scope module add25 $end
$upscope $end
$scope module add26 $end
$upscope $end
$scope module add27 $end
$upscope $end
$scope module add28 $end
$upscope $end
$scope module add29 $end
$upscope $end
$scope module add3 $end
$upscope $end
$scope module add30 $end
$upscope $end
$scope module add31 $end
$upscope $end
$scope module add4 $end
$upscope $end
$scope module add5 $end
$upscope $end
$scope module add6 $end
$upscope $end
$scope module add7 $end
$upscope $end
$scope module add8 $end
$upscope $end
$scope module add9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module immsh $end
$upscope $end
$scope module pcadd1 $end
$upscope $end
$scope module pcadd2 $end
$upscope $end
$scope module pcbrmux $end
$upscope $end
$scope module pcmux $end
$upscope $end
$scope module pcreg $end
$upscope $end
$scope module resmux $end
$upscope $end
$scope module rf $end
$upscope $end
$scope module se $end
$upscope $end
$scope module srcbmux $end
$upscope $end
$scope module wrmux $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 j.
b0 i.
b10 h.
b101 g.
b101 f.
bx e.
b101 d.
b101 c.
b0 b.
bx a.
b10 `.
b101 _.
b10 ^.
b0 ].
b101 \.
bx [.
b101 Z.
b0 Y.
b100 X.
b100 W.
b10000000000000010100 V.
b100 U.
b100 T.
b11000 S.
b100 R.
b11000 Q.
b10100 P.
b100 O.
b0 N.
b100 M.
b100 L.
b101 K.
b10100 J.
1I.
0H.
0G.
1F.
0E.
1D.
0C.
0B.
1A.
0@.
1?.
0>.
0=.
1<.
0;.
1:.
09.
08.
17.
06.
15.
04.
03.
12.
01.
10.
0/.
0..
1-.
0,.
1+.
0*.
0).
1(.
0'.
1&.
0%.
0$.
1#.
0".
1!.
0~-
0}-
1|-
0{-
1z-
0y-
0x-
1w-
0v-
1u-
0t-
0s-
1r-
0q-
1p-
0o-
0n-
1m-
0l-
1k-
0j-
0i-
1h-
0g-
1f-
0e-
0d-
1c-
0b-
1a-
0`-
0_-
1^-
0]-
1\-
0[-
0Z-
1Y-
0X-
1W-
0V-
0U-
1T-
0S-
1R-
0Q-
0P-
1O-
0N-
1M-
0L-
0K-
1J-
0I-
0H-
0G-
0F-
0E-
0D-
1C-
0B-
0A-
1@-
0?-
1>-
0=-
0<-
1;-
0:-
19-
08-
07-
16-
05-
14-
03-
02-
11-
00-
1/-
0.-
0--
1,-
0+-
1*-
0)-
0(-
1'-
0&-
1%-
0$-
0#-
1"-
0!-
1~,
0},
0|,
1{,
0z,
1y,
0x,
0w,
1v,
0u,
1t,
0s,
0r,
1q,
0p,
1o,
0n,
0m,
1l,
0k,
1j,
0i,
0h,
0g,
b0 f,
b0 e,
b11111111111111111111111111111011 d,
1c,
b11111111111111111111111111111010 b,
1a,
0`,
0_,
1^,
0],
1\,
0[,
0Z,
1Y,
0X,
1W,
0V,
0U,
1T,
0S,
1R,
0Q,
0P,
1O,
0N,
1M,
0L,
0K,
1J,
0I,
1H,
0G,
0F,
1E,
0D,
1C,
0B,
0A,
1@,
0?,
1>,
0=,
0<,
1;,
0:,
19,
08,
07,
16,
05,
14,
03,
02,
11,
00,
1/,
0.,
0-,
1,,
0+,
1*,
0),
0(,
1',
0&,
1%,
0$,
0#,
1",
0!,
1~+
0}+
0|+
1{+
0z+
1y+
0x+
0w+
1v+
0u+
1t+
0s+
0r+
1q+
0p+
1o+
0n+
0m+
1l+
0k+
1j+
0i+
0h+
1g+
0f+
1e+
0d+
0c+
1b+
0a+
0`+
0_+
0^+
0]+
0\+
1[+
0Z+
0Y+
1X+
0W+
1V+
0U+
0T+
1S+
0R+
1Q+
0P+
0O+
1N+
0M+
1L+
0K+
0J+
1I+
0H+
1G+
0F+
0E+
1D+
0C+
1B+
0A+
0@+
1?+
0>+
1=+
0<+
0;+
1:+
09+
18+
07+
06+
15+
04+
13+
02+
01+
10+
0/+
1.+
0-+
0,+
1++
0*+
1)+
0(+
0'+
1&+
0%+
1$+
0#+
0"+
0!+
b0 ~*
b0 }*
b11111111111111111111111111111011 |*
1{*
b11111111111111111111111111111010 z*
b11111111111111111111111111111111 y*
b11111111111111111111111111111111 x*
1w*
b11111111111111111111111111111111 v*
b0 u*
b101 t*
b11111111111111111111111111111011 s*
b11111111111111111111111111111111 r*
b0 q*
b101 p*
b101 o*
b0 n*
b101 m*
b0 l*
0k*
0j*
0i*
0h*
0g*
0f*
0e*
0d*
0c*
0b*
0a*
0`*
0_*
0^*
0]*
0\*
0[*
0Z*
0Y*
0X*
0W*
0V*
0U*
0T*
0S*
0R*
0Q*
0P*
0O*
0N*
0M*
0L*
0K*
0J*
0I*
0H*
0G*
0F*
0E*
0D*
0C*
0B*
0A*
0@*
0?*
0>*
0=*
0<*
0;*
0:*
09*
08*
07*
06*
05*
04*
03*
02*
01*
00*
0/*
0.*
0-*
0,*
0+*
0**
0)*
0(*
0'*
0&*
0%*
0$*
0#*
0"*
0!*
0~)
0})
0|)
0{)
0z)
0y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0k)
1j)
0i)
0h)
1g)
0f)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
0^)
0])
0\)
0[)
0Z)
0Y)
0X)
0W)
0V)
0U)
0T)
0S)
0R)
0Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
0D)
0C)
0B)
0A)
0@)
0?)
0>)
0=)
0<)
0;)
0:)
09)
08)
07)
06)
05)
04)
03)
02)
01)
00)
0/)
1.)
0-)
1,)
0+)
b0 *)
b101 ))
b0 ()
b101 ')
0&)
b101 %)
b0 $)
b101 #)
b101 ")
b0 !)
b101 ~(
b11111111111111111111111111111111 }(
b11111111111111111111111111111011 |(
b10 {(
b101 z(
b0 y(
b11000 x(
b100 w(
b100 v(
b100 u(
b101 t(
b101 s(
b10100 r(
b0 q(
b101 p(
bx o(
b10 n(
bx m(
b100000000000100000000000000101 l(
b10 k(
b101000000 j(
b0 i(
b1000 h(
b10 g(
b0 f(
b101 e(
b10 d(
b0 c(
0b(
b1000 a(
b101 `(
b10 _(
b101 ^(
1](
0\(
0[(
b0 Z(
0Y(
0X(
1W(
bx V(
0U(
bx T(
b100000000000100000000000000101 S(
b100000000000100000000000000101 R(
b0 Q(
b101 P(
bx O(
bx N(
b101 M(
b100000000000100000000000000101 L(
b0 K(
bx J(
bx I(
1H(
1G(
b101 F(
0E(
bx D(
bx C(
zB(
zA(
bz @(
z?(
x>(
x=(
x<(
z;(
z:(
x9(
x8(
x7(
z6(
z5(
x4(
x3(
x2(
z1(
z0(
x/(
x.(
x-(
z,(
z+(
x*(
x)(
x((
z'(
z&(
x%(
x$(
x#(
z"(
z!(
x~'
x}'
x|'
z{'
zz'
xy'
xx'
xw'
zv'
zu'
xt'
xs'
xr'
zq'
zp'
xo'
xn'
xm'
zl'
zk'
xj'
xi'
xh'
zg'
zf'
xe'
xd'
xc'
zb'
za'
x`'
x_'
x^'
z]'
z\'
x['
xZ'
xY'
zX'
zW'
xV'
xU'
xT'
zS'
zR'
xQ'
xP'
xO'
zN'
zM'
xL'
xK'
xJ'
zI'
zH'
xG'
xF'
xE'
zD'
zC'
xB'
xA'
x@'
z?'
z>'
x='
x<'
x;'
z:'
z9'
x8'
x7'
x6'
z5'
z4'
x3'
x2'
x1'
z0'
z/'
x.'
x-'
x,'
z+'
z*'
x)'
x('
x''
z&'
z%'
x$'
x#'
x"'
z!'
z~&
x}&
x|&
x{&
zz&
zy&
xx&
xw&
xv&
zu&
zt&
xs&
xr&
xq&
zp&
zo&
xn&
xm&
xl&
zk&
zj&
xi&
xh&
xg&
zf&
ze&
xd&
xc&
xb&
za&
z`&
x_&
x^&
z]&
z\&
bx [&
bx Z&
1Y&
bz X&
bz W&
bx V&
b0x U&
bz T&
bz S&
1R&
0Q&
0P&
1O&
0N&
1M&
0L&
0K&
1J&
0I&
1H&
0G&
0F&
1E&
0D&
1C&
0B&
0A&
1@&
0?&
1>&
0=&
0<&
1;&
0:&
19&
08&
07&
16&
05&
14&
03&
02&
11&
00&
1/&
0.&
0-&
1,&
0+&
1*&
0)&
0(&
1'&
0&&
1%&
0$&
0#&
1"&
0!&
1~%
0}%
0|%
1{%
0z%
1y%
0x%
0w%
1v%
0u%
1t%
0s%
0r%
1q%
0p%
1o%
0n%
0m%
1l%
0k%
1j%
0i%
0h%
1g%
0f%
1e%
0d%
0c%
1b%
0a%
1`%
0_%
0^%
1]%
0\%
1[%
0Z%
0Y%
1X%
0W%
1V%
0U%
0T%
1S%
0R%
1Q%
0P%
0O%
0N%
1M%
1L%
0K%
0J%
1I%
0H%
1G%
0F%
0E%
1D%
0C%
1B%
0A%
0@%
1?%
0>%
1=%
0<%
0;%
1:%
09%
18%
07%
06%
15%
04%
13%
02%
01%
10%
0/%
1.%
0-%
0,%
1+%
0*%
1)%
0(%
0'%
1&%
0%%
1$%
0#%
0"%
1!%
0~$
1}$
0|$
0{$
1z$
0y$
1x$
0w$
1v$
0u$
0t$
0s$
1r$
0q$
1p$
b1 o$
b11111111111111111111111111111110 n$
1m$
b11111111111111111111111111111000 l$
b101 k$
1j$
0i$
0h$
1g$
0f$
1e$
0d$
0c$
1b$
0a$
1`$
0_$
0^$
1]$
0\$
1[$
0Z$
0Y$
1X$
0W$
1V$
0U$
0T$
1S$
0R$
1Q$
0P$
0O$
1N$
0M$
1L$
0K$
0J$
1I$
0H$
1G$
0F$
0E$
1D$
0C$
1B$
0A$
0@$
1?$
0>$
1=$
0<$
0;$
1:$
09$
18$
07$
06$
15$
04$
13$
02$
01$
10$
0/$
1.$
0-$
0,$
1+$
0*$
1)$
0($
0'$
1&$
0%$
1$$
0#$
0"$
1!$
0~#
1}#
0|#
0{#
1z#
0y#
1x#
0w#
0v#
1u#
0t#
1s#
0r#
0q#
1p#
0o#
1n#
0m#
0l#
1k#
0j#
1i#
0h#
0g#
0f#
1e#
1d#
0c#
0b#
1a#
0`#
1_#
0^#
0]#
1\#
0[#
1Z#
0Y#
0X#
1W#
0V#
1U#
0T#
0S#
1R#
0Q#
1P#
0O#
0N#
1M#
0L#
1K#
0J#
0I#
1H#
0G#
1F#
0E#
0D#
1C#
0B#
1A#
0@#
0?#
1>#
0=#
1<#
0;#
0:#
19#
08#
17#
06#
05#
14#
03#
12#
01#
10#
0/#
0.#
0-#
1,#
0+#
1*#
b1 )#
b11111111111111111111111111111110 (#
1'#
b11111111111111111111111111111000 &#
b101 %#
b11111111111111111111111111111111 $#
b11111111111111111111111111111111 ##
1"#
b11111111111111111111111111111111 !#
b11111111111111111111111111111110 ~"
b111 }"
b101 |"
b11111111111111111111111111111111 {"
b111 z"
b111 y"
b101 x"
b101 w"
b111 v"
b101 u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
1L"
0K"
1J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
1s
1r
1q
1p
1o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
1;
1:
19
08
07
16
15
14
b111 3
b1100 2
01
b111 0
b101 /
b1100 .
b1100 -
b101 ,
b111 +
b11111111111111111111111111111111 *
b11111111111111111111111111111110 )
b10 (
b111 '
b101 &
b10 %
b111 $
b101 #
b1100 "
0!
$end
#2
b11111111111111111111111111111110 "
b11111111111111111111111111111110 .
b110 %
b110 (
#4
b101 "
b101 .
b0 %
b0 (
#5
0G(
#6
b111 "
b111 .
b1 %
b1 (
#8
b11111111111111111111111111111111 "
b11111111111111111111111111111111 .
b111 %
b111 (
#10
b101 D(
b101 I(
b101 O(
b101 V(
b101 o(
b101 a.
b101 e.
b11001 "
b11001 .
1G(
b0 $#
1K$
b0 *
b0 {"
b0 !#
b0 ##
0"#
13&
0L$
04&
1J$
12&
1F$
1.&
0G$
0/&
1E$
1-&
1<$
1$&
0=$
0%&
1;$
1#&
17$
1}%
08$
0~%
16$
1|%
12$
1x%
03$
0y%
11$
1w%
1-$
1s%
0.$
0t%
1,$
1r%
1($
1n%
0)$
0o%
1'$
1m%
1#$
1i%
0$$
0j%
1"$
1h%
1|#
1d%
0}#
0e%
1{#
1c%
1w#
1_%
0x#
0`%
1v#
1^%
1r#
1Z%
0s#
0[%
1q#
1Y%
1m#
1U%
0n#
0V%
1l#
1T%
1c#
1K%
0d#
0L%
1b#
1J%
1^#
1F%
0_#
0G%
1]#
1E%
1Y#
1A%
0Z#
0B%
1X#
1@%
1T#
1<%
0U#
0=%
1S#
1;%
1O#
17%
0P#
08%
1N#
16%
1J#
12%
0K#
03%
1I#
11%
1E#
1-%
0F#
0.%
1D#
1,%
1@#
1(%
0A#
0)%
1?#
1'%
1;#
1#%
0<#
0$%
1:#
1"%
16#
1|$
07#
0}$
15#
1{$
1i$
1Q&
0j$
0R&
1h$
1P&
1d$
1L&
0e$
0M&
1c$
1K&
1_$
1G&
0`$
0H&
1^$
1F&
1Z$
1B&
0[$
0C&
1Y$
1A&
1U$
1=&
0V$
0>&
1T$
1<&
1P$
18&
1(&
1L"
1@$
1["
1g#
0Q$
1O%
09&
1s$
1P%
1Q%
0:
1J"
1-#
1h#
1i#
1Y"
11#
1O$
1w$
17&
06
17
1r
0s
b11001 -
b11001 2
0<
b1110 3
1K"
02#
b11111111111111111111111111111111 )#
1A$
b101 ~"
b101 (#
0B$
0x$
b11111111111111111111111111111111 o$
1)&
b101 )
b101 n$
0*&
1q$
1N%
0'&
1+#
1f#
0?$
b11111111111111111111111111110101 l$
05
0p
1I"
b11111111111111111111111111110101 &#
18
1H"
b1010 ,
b1010 w"
b1111 +
b1111 z"
1.#
1>$
1t$
1&&
b1010 $
b1010 '
b1010 0
b1010 v"
b1010 y"
b1010 }"
b1111 #
b1111 &
b1111 /
b1111 u"
b1111 x"
b1111 |"
b1111 %#
b1111 k$
b10 %
b10 (
#12
b101 "
b101 .
b110 %
b110 (
#14
b1010 "
b1010 .
b0 %
b0 (
#15
0G(
#16
b1111 "
b1111 .
b1 %
b1 (
#18
1!
b0 "
b0 .
b111 %
b111 (
#20
0!
b0xxx "
b0xxx .
1G(
bx %
bx (
#22
0H(
#25
0G(
#30
b1100 t(
b1100 \.
b1100 _.
b1100 F(
b1100 M(
b1100 P(
b1100 ^(
b1100 z(
b1100 %)
b1100 Z.
1`+
1H-
1^+
1F-
1(+
1n,
0)+
0o,
1'+
1m,
b11 }*
1#+
b11 e,
1i,
0$+
b11111111111111111111111111110100 s*
b11111111111111111111111111110100 |*
09,
0j,
b11111111111111111111111111110100 |(
b11111111111111111111111111110100 d,
0!.
1C*
b1100 ")
b1100 ')
0.)
1"+
06,
1h,
0|-
b11111111111111111111111111110011 z*
b1100 ~(
b1100 o*
1@*
0,)
b11111111111111111111111111110011 b,
bx D(
bx I(
bx O(
bx V(
bx o(
bx a.
bx e.
b11 n(
b11 `.
b11 j.
b1100 p(
b1100 #)
b1100 ))
b1100 m*
b1100 p*
b1100 t*
b1100 g.
b110000 r(
b110000 J.
b110000 P.
b1000 w(
b1000 W.
b1000 X.
b1100 `(
b1100 e(
b11000000000000110000 V.
b11 ^.
b11 h.
b1100 s(
b1100 K.
b1100 d.
b1100 f.
b1100 c.
b1000 v(
b1000 T.
b1000 U.
b100000000000110000000000001100 L(
b100000000000110000000000001100 R(
b100000000000110000000000001100 S(
b100000000000110000000000001100 l(
b1 Q(
b111000 x(
b111000 Q.
b111000 S.
b1000 u(
b1000 M.
b1000 O.
b1000 R.
b100 K(
b100 Z(
b100 y(
b100 N.
b100 Y.
1G(
#35
0G(
#40
b11 t(
b11 \.
b11 _.
b11 F(
b11 M(
b11 P(
b11 ^(
b11 z(
b11 %)
b11 Z.
1L*
1K*
1G*
1F*
1=*
1<*
18*
17*
13*
12*
1.*
1-*
1)*
1(*
1$*
1#*
1})
1|)
1x)
1w)
1s)
1r)
1n)
1m)
1d)
1c)
1_)
1^)
1Z)
1Y)
1U)
1T)
1P)
1O)
1K)
1J)
1F)
1E)
1A)
1@)
1<)
1;)
17)
16)
1j*
1i*
1e*
1d*
1`*
1_*
1[*
1Z*
1V*
1U*
1Q*
1P*
b0 y*
0!.
09,
1B*
b0 }(
b0 r*
b0 v*
b0 x*
0w*
0'+
0^+
0m,
0F-
0}-
07,
0C*
0L+
0Q+
0V+
0[+
0e+
0j+
0o+
0t+
0y+
0~+
0%,
0*,
0/,
04,
0>,
0C,
04-
09-
0>-
0C-
0M-
0R-
0W-
0\-
0a-
0f-
0k-
0p-
0u-
0z-
0&.
0+.
0#+
0(+
0i,
0n,
1..
0G-
1F,
0_+
1A*
0M*
0H*
0>*
09*
04*
0/*
0**
0%*
0~)
0y)
0t)
0o)
0e)
0`)
0[)
0V)
1$+
0)+
1H,
0M,
0R,
0\,
0W,
0a,
0.+
03+
08+
0=+
0B+
0G+
1j,
0o,
10.
05.
0:.
0D.
0?.
0I.
0t,
0y,
0~,
0%-
0*-
0/-
b1000 e,
1~-
b10101 |(
b10101 d,
1H-
b1000 }*
18,
b10101 s*
b10101 |*
1`+
b11111111111111111111111111111100 ()
1i)
0j)
0I+
0N+
0S+
0X+
0b+
0g+
0l+
0q+
0v+
0{+
0",
0',
0,,
01,
0;,
0@,
01-
06-
0;-
0@-
0J-
0O-
0T-
0Y-
0^-
0c-
0h-
0m-
0r-
0w-
0#.
0(.
0Q)
0L)
0G)
0B)
0=)
08)
0k*
0a*
0f*
0\*
0W*
0R*
13)
b11 ")
b11 ')
1.)
1J*
1E*
1;*
16*
11*
1,*
1'*
1"*
1{)
1v)
1q)
1l)
1b)
1])
1X)
1S)
0"+
0&+
16,
0E,
0J,
0O,
0Y,
0T,
0^,
0++
00+
05+
0:+
0?+
0D+
0h,
0l,
1|-
0-.
02.
07.
0A.
0<.
0F.
0q,
0v,
0{,
0"-
0'-
0,-
1{-
1D-
15,
1\+
1?*
1f)
b1000 z*
b11111111111111111111111111111111 ~(
b11111111111111111111111111111111 o*
b100 !)
b100 l*
1N)
1I)
1D)
1?)
1:)
15)
1h*
1^*
1c*
1Y*
1T*
1O*
0@*
10)
1,)
b1000 b,
b1100 q(
b1100 $)
b1100 *)
b1100 n*
b1100 q*
b1100 u*
b1100 ~*
b1100 f,
b1100 b.
b111 n(
b111 `.
b111 j.
b11111111111111111111111111110111 p(
b11111111111111111111111111110111 #)
b11111111111111111111111111110111 ))
b11111111111111111111111111110111 m*
b11111111111111111111111111110111 p*
b11111111111111111111111111110111 t*
b11111111111111111111111111110111 g.
b11111111111111111111111111011100 r(
b11111111111111111111111111011100 J.
b11111111111111111111111111011100 P.
b1100 w(
b1100 W.
b1100 X.
b110111 `(
b110111 e(
b1100111111111111111011100 V.
b11 ].
b111 ^.
b111 h.
b11111 i.
b11111111111111111111111111110111 s(
b11111111111111111111111111110111 K.
b11111111111111111111111111110111 d.
b11111111111111111111111111110111 f.
b1111111111110111 c.
bx D(
bx I(
bx O(
bx V(
bx o(
bx a.
bx e.
b1100 v(
b1100 T.
b1100 U.
b100000011001111111111111110111 L(
b100000011001111111111111110111 R(
b100000011001111111111111110111 S(
b100000011001111111111111110111 l(
b10 Q(
b11111111111111111111111111101000 x(
b11111111111111111111111111101000 Q.
b11111111111111111111111111101000 S.
b1100 u(
b1100 M.
b1100 O.
b1100 R.
b1000 K(
b1000 Z(
b1000 y(
b1000 N.
b1000 Y.
1G(
#45
0G(
#50
b1 _(
b1 d(
b1 g(
b1 k(
b1 {(
1=+
1%-
1J,
1:+
12.
1"-
0D)
0T*
b111 t(
b111 \.
b111 _.
1X(
0](
b10 c(
b10 f(
b10 i(
b111 F(
b111 M(
b111 P(
b111 ^(
b111 z(
b111 %)
b111 Z.
b110000010 j(
0J)
0Z*
1h)
b11111111111111111111111111111111 y*
1M,
0F)
0V*
15.
1o,
1)+
12)
b11111111111111111111111111111111 }(
b11111111111111111111111111111111 r*
b11111111111111111111111111111111 v*
b11111111111111111111111111111111 x*
1w*
0K*
0F*
0<*
07*
02*
0-*
0(*
0#*
0|)
0w)
0r)
0m)
0c)
0^)
0Y)
0K,
0G)
0W*
03.
1m,
1'+
0P*
03)
1L+
1Q+
1V+
1[+
1e+
1j+
1o+
1t+
1y+
1~+
1%,
1*,
1/,
14,
1>,
1C,
0L*
0G*
0=*
08*
03*
0.*
0)*
0$*
0})
0x)
0s)
0n)
0d)
0_)
0Z)
0U)
14-
19-
1>-
1C-
1M-
1R-
1W-
1\-
1a-
1f-
1k-
1p-
1u-
1z-
1&.
1+.
0G,
0T)
0O)
0E)
0@)
0;)
06)
0d*
0i*
0_*
0U*
0/.
0..
1F-
1i,
0F,
1^+
1#+
0B*
1A*
11)
0M*
0H*
0>*
09*
04*
0/*
0**
0%*
0~)
0y)
0t)
0o)
0e)
0`)
0[)
0V)
1H,
1R,
1\,
1W,
1a,
1.+
13+
18+
1B+
1G+
0P)
0K)
0A)
0<)
07)
0j*
0`*
0e*
0[*
0Q*
10.
1:.
1D.
1?.
1I.
1t,
1y,
1~,
1*-
1/-
0~-
1!.
1H-
b11 e,
1n,
b11111111111111111111111111111110 |(
b11111111111111111111111111111110 d,
0j,
08,
19,
1`+
b11 }*
1(+
b11111111111111111111111111111110 s*
b11111111111111111111111111111110 |*
0$+
1C*
1i)
0j)
b111 ()
1-)
0.)
1I+
1N+
1S+
1X+
1b+
1g+
1l+
1q+
1v+
1{+
1",
1',
1,,
11,
1;,
1@,
11-
16-
1;-
1@-
1J-
1O-
1T-
1Y-
1^-
1c-
1h-
1m-
1r-
1w-
1#.
1(.
0Q)
0L)
0B)
0=)
08)
0k*
0a*
0f*
0\*
b1000 ")
b1000 ')
0R*
0J*
0E*
0;*
06*
01*
0,*
0'*
0"*
0{)
0v)
0q)
0l)
0b)
0])
0X)
0S)
1&+
1E,
1O,
1Y,
1T,
1^,
1++
10+
15+
1?+
1D+
1l,
1-.
17.
1A.
1<.
1F.
1q,
1v,
1{,
1'-
1,-
0{-
0D-
1k,
1g,
05,
0\+
1%+
1!+
0?*
0f)
1/)
1+)
b11111111111111111111111111111010 z*
b111 ~(
b111 o*
b1 !)
b1 l*
0N)
0I)
0?)
0:)
05)
0h*
0^*
0c*
0Y*
0O*
00)
b11111111111111111111111111111010 b,
b11 q(
b11 $)
b11 *)
b11 n*
b11 q*
b11 u*
b11 ~*
b11 f,
b11 b.
b100 n(
b100 `.
b100 j.
b101 p(
b101 #)
b101 ))
b101 m*
b101 p*
b101 t*
b101 g.
b1000000010010100 r(
b1000000010010100 J.
b1000000010010100 P.
b10000 w(
b10000 W.
b10000 X.
b0 a(
b0 h(
b100101 `(
b100101 e(
b11100010001000000010010100 V.
b111 ].
b10 ^.
b10 h.
b100 i.
b10000000100101 s(
b10000000100101 K.
b10000000100101 d.
b10000000100101 f.
b10000000100101 c.
b101 D(
b101 I(
b101 O(
b101 V(
b101 o(
b101 a.
b101 e.
b10000 v(
b10000 T.
b10000 U.
b111000100010000000100101 L(
b111000100010000000100101 R(
b111000100010000000100101 S(
b111000100010000000100101 l(
b11 Q(
b1000000010100100 x(
b1000000010100100 Q.
b1000000010100100 S.
b10000 u(
b10000 M.
b10000 O.
b10000 R.
b1100 K(
b1100 Z(
b1100 y(
b1100 N.
b1100 Y.
1G(
#55
0G(
#60
b100 t(
b100 \.
b100 _.
b100 F(
b100 M(
b100 P(
b100 ^(
b100 z(
b100 %)
b100 Z.
b0 _(
b0 d(
b0 g(
b0 k(
b0 {(
b0 y*
1*.
1B,
b0 }(
b0 r*
b0 v*
b0 x*
0w*
0+.
0C,
1).
1A,
1%.
1=,
0&.
0>,
1$.
1<,
1y-
13,
0z-
04,
1x-
12,
1t-
1.,
0u-
0/,
1s-
1-,
1o-
1),
0p-
0*,
1n-
1(,
1j-
1$,
0k-
0%,
1i-
1#,
1e-
1}+
0f-
0~+
1d-
1|+
1`-
1x+
0a-
0y+
1_-
1w+
1[-
1s+
0\-
0t+
1Z-
1r+
1V-
1n+
0W-
0o+
1U-
1m+
1Q-
1i+
0R-
0j+
1P-
1h+
1L-
1d+
0M-
0e+
1K-
1c+
1B-
1Z+
0C-
0[+
1A-
1Y+
1=-
1U+
0>-
0V+
1<-
1T+
18-
1P+
09-
0Q+
17-
1O+
13-
1K+
04-
0L+
12-
1J+
1.-
1F+
0/-
0G+
1--
1E+
1)-
1A+
0*-
0B+
1(-
1@+
1$-
1<+
0%-
0=+
1#-
1;+
1},
17+
0~,
08+
1|,
16+
1x,
12+
0y,
03+
1w,
11+
1s,
1-+
0t,
0.+
1r,
1,+
1H.
1`,
0I.
0a,
1G.
1_,
1C.
1[,
0D.
0\,
1B.
1Z,
1>.
1V,
0?.
0W,
1=.
1U,
19.
1Q,
0:.
0R,
18.
1P,
14.
1L,
05.
0M,
13.
1K,
0h)
1/.
1G,
1R*
02)
00.
0}-
0m,
0H,
07,
0'+
1P*
13)
1..
0G-
0F-
0i,
1F,
0_+
0^+
0#+
1B*
01)
1~-
0!.
1H-
b11111111111111111111111111111000 e,
0n,
0o,
b101 |(
b101 d,
1j,
18,
09,
1`+
b11111111111111111111111111111000 }*
0(+
0)+
b101 s*
b101 |*
1$+
0C*
0j)
b1100 ()
0-)
b10011 ")
b10011 ')
1.)
0&+
0l,
b11111111111111111111111111111000 z*
10)
b11111111111111111111111111111000 b,
1{-
1D-
0k,
0g,
15,
1\+
0%+
0!+
b1111 ~(
b1111 o*
b100 !)
b100 l*
1?*
1f)
0/)
0+)
b111 p(
b111 #)
b111 ))
b111 m*
b111 p*
b111 t*
b111 g.
b1100 q(
b1100 $)
b1100 *)
b1100 n*
b1100 q*
b1100 u*
b1100 ~*
b1100 f,
b1100 b.
b111 D(
b111 I(
b111 O(
b111 V(
b111 o(
b111 a.
b111 e.
b101 n(
b101 `.
b101 j.
b1010000010010000 r(
b1010000010010000 J.
b1010000010010000 P.
b10100 w(
b10100 W.
b10100 X.
b100100 `(
b100100 e(
b1100100001010000010010000 V.
b11 ].
b100 ^.
b100 h.
b101 i.
b10100000100100 s(
b10100000100100 K.
b10100000100100 d.
b10100000100100 f.
b10100000100100 c.
b10100 v(
b10100 T.
b10100 U.
b11001000010100000100100 L(
b11001000010100000100100 R(
b11001000010100000100100 S(
b11001000010100000100100 l(
b100 Q(
b1010000010100100 x(
b1010000010100100 Q.
b1010000010100100 S.
b10100 u(
b10100 M.
b10100 O.
b10100 R.
b10000 K(
b10000 Z(
b10000 y(
b10000 N.
b10000 Y.
1G(
#65
0G(
#70
b1011 t(
b1011 \.
b1011 _.
b1011 F(
b1011 M(
b1011 P(
b1011 ^(
b1011 z(
b1011 %)
b1011 Z.
b10 _(
b10 d(
b10 g(
b10 k(
b10 {(
b11111111111111111111111111111111 y*
0*.
0B,
b11111111111111111111111111111111 }(
b11111111111111111111111111111111 r*
b11111111111111111111111111111111 v*
b11111111111111111111111111111111 x*
1w*
1+.
1C,
0).
0A,
0%.
0=,
1&.
1>,
0$.
0<,
0y-
03,
1z-
14,
0x-
02,
0t-
0.,
1u-
1/,
0s-
0-,
0o-
0),
1p-
1*,
0n-
0(,
0j-
0$,
1k-
1%,
0i-
0#,
0e-
0}+
1f-
1~+
0d-
0|+
0`-
0x+
1a-
1y+
0_-
0w+
0[-
0s+
1\-
1t+
0Z-
0r+
0V-
0n+
1W-
1o+
0U-
0m+
0Q-
0i+
1R-
1j+
0P-
0h+
0L-
0d+
1M-
1e+
0K-
0c+
0B-
0Z+
1C-
1[+
0A-
0Y+
0=-
0U+
1>-
1V+
0<-
0T+
08-
0P+
19-
1Q+
07-
0O+
03-
0K+
14-
1L+
02-
0J+
0.-
0F+
1/-
1G+
0--
0E+
0)-
0A+
1*-
1B+
0(-
0@+
0$-
0<+
1%-
1=+
0#-
0;+
0},
07+
1~,
18+
0|,
06+
0x,
02+
1y,
13+
0w,
01+
0s,
0-+
1t,
1.+
0r,
0,+
0H.
0`,
1I.
1a,
0G.
0_,
0C.
0[,
1D.
1\,
0B.
0Z,
0>.
0V,
1?.
1W,
0=.
0U,
09.
0Q,
1:.
1R,
08.
0P,
04.
0L,
15.
1M,
03.
0K,
0/.
0G,
0R*
10.
1H,
0P*
0..
0F,
b100 ()
0B*
b0 e,
0~-
b11111111111111111111111111111101 |(
b11111111111111111111111111111101 d,
1!.
b0 }*
08,
b11111111111111111111111111111101 s*
b11111111111111111111111111111101 |*
19,
b1011 ")
b1011 ')
1C*
0{-
05,
b111 ~(
b111 o*
0?*
b100 q(
b100 $)
b100 *)
b100 n*
b100 q*
b100 u*
b100 ~*
b100 f,
b100 b.
b1010000010000000 r(
b1010000010000000 J.
b1010000010000000 P.
b11000 w(
b11000 W.
b11000 X.
b100000 `(
b100000 e(
b10100100001010000010000000 V.
b101 ].
b10100000100000 s(
b10100000100000 K.
b10100000100000 d.
b10100000100000 f.
b10100000100000 c.
b11000 v(
b11000 T.
b11000 U.
b101001000010100000100000 L(
b101001000010100000100000 R(
b101001000010100000100000 S(
b101001000010100000100000 l(
b101 Q(
b1010000010011000 x(
b1010000010011000 Q.
b1010000010011000 S.
b11000 u(
b11000 M.
b11000 O.
b11000 R.
b10100 K(
b10100 Z(
b10100 y(
b10100 N.
b10100 Y.
1G(
#75
0G(
#80
b1000 t(
b1000 \.
b1000 _.
0W(
0X(
1b(
b1 c(
b1 f(
b1 i(
b1000 F(
b1000 M(
b1000 P(
b1000 ^(
b1000 z(
b1000 %)
b1000 Z.
b100001 j(
b110 _(
b110 d(
b110 g(
b110 k(
b110 {(
b0 y*
1*.
1B,
b0 }(
b0 r*
b0 v*
b0 x*
0w*
0+.
0C,
1).
1A,
1%.
1=,
0&.
0>,
1$.
1<,
1y-
13,
0z-
04,
1x-
12,
1t-
1.,
0u-
0/,
1s-
1-,
1o-
1),
0p-
0*,
1n-
1(,
1j-
1$,
0k-
0%,
1i-
1#,
1e-
1}+
0f-
0~+
1d-
1|+
1`-
1x+
0a-
0y+
1_-
1w+
1[-
1s+
0\-
0t+
1Z-
1r+
1V-
1n+
0W-
0o+
1U-
1m+
1Q-
1i+
0R-
0j+
1P-
1h+
1L-
1d+
0M-
0e+
1K-
1c+
1B-
1Z+
0C-
0[+
1A-
1Y+
1=-
1U+
0>-
0V+
1<-
1T+
18-
1P+
09-
0Q+
17-
1O+
13-
1K+
04-
0L+
12-
1J+
1.-
1F+
0/-
0G+
1--
1E+
1)-
1A+
0*-
0B+
1(-
1@+
1$-
1<+
0%-
0=+
1#-
1;+
1},
17+
0~,
08+
1|,
16+
1x,
12+
0y,
03+
1w,
11+
1s,
1-+
0t,
0.+
1r,
1,+
1H.
1`,
0I.
0a,
1G.
1_,
1C.
1[,
0D.
0\,
1B.
1Z,
1>.
1V,
0?.
0W,
1=.
1U,
19.
1Q,
0:.
1}-
0R,
17,
18.
1G-
1P,
1_+
14.
1L,
05.
1F-
0M,
1^+
13.
1n,
1K,
1(+
1/.
1G,
0R*
00.
1m,
0H,
1'+
0P*
1]+
1E-
1..
1i,
1F,
1#+
0B*
0A*
1h)
11)
b11111111111111111111111111111100 z*
0g)
b11111111111111111111111111111100 b,
b11111111111111111111111111111111 e,
1~-
1!.
0H-
0o,
b1000 |(
b1000 d,
0j,
b11111111111111111111111111111111 }*
18,
19,
0`+
0)+
b1000 s*
b1000 |*
0$+
1C*
0i)
1j)
12)
13)
b11 ()
1-)
b1110 ")
b1110 ')
0.)
b11 p(
b11 #)
b11 ))
b11 m*
b11 p*
b11 t*
b11 g.
b11 D(
b11 I(
b11 O(
b11 V(
b11 o(
b11 a.
b11 e.
b111 n(
b111 `.
b111 j.
b101000 r(
b101000 J.
b101000 P.
1{-
0D-
1k,
1g,
15,
0\+
1%+
1!+
b1011 ~(
b1011 o*
b11 !)
b11 l*
1?*
0f)
1/)
1+)
b11100 w(
b11100 W.
b11100 X.
b100 a(
b100 h(
b1010 `(
b1010 e(
b10100111000000000000101000 V.
b111 ^.
b111 h.
b0 i.
b1010 s(
b1010 K.
b1010 d.
b1010 f.
b1010 c.
b1011 q(
b1011 $)
b1011 *)
b1011 n*
b1011 q*
b1011 u*
b1011 ~*
b1011 f,
b1011 b.
b11100 v(
b11100 T.
b11100 U.
b10000101001110000000000001010 L(
b10000101001110000000000001010 R(
b10000101001110000000000001010 S(
b10000101001110000000000001010 l(
b110 Q(
b1000100 x(
b1000100 Q.
b1000100 S.
b11100 u(
b11100 M.
b11100 O.
b11100 R.
b11000 K(
b11000 Z(
b11000 y(
b11000 N.
b11000 Y.
1G(
#85
0G(
#90
1U(
b111 _(
b111 d(
b111 g(
b111 k(
b111 {(
b0 t(
b0 \.
b0 _.
1W(
1X(
0b(
b10 c(
b10 f(
b10 i(
b0 F(
b0 M(
b0 P(
b0 ^(
b0 z(
b0 %)
b0 Z.
b110000010 j(
1R*
1P*
0!.
09,
1B*
0}-
0F-
0m,
07,
0^+
0'+
0C*
0j)
0G-
0n,
b11111111111111111111111111111000 e,
0i,
0_+
0(+
b11111111111111111111111111111000 }*
0#+
1A*
0h)
01)
1H-
0o,
b101 |(
b101 d,
1j,
1`+
0)+
b101 s*
b101 |*
1$+
1i)
02)
13)
b1100 ()
0-)
b10011 ")
b10011 ')
1.)
0]+
0E-
b11111111111111111111111111111000 z*
1g)
b11111111111111111111111111111000 b,
1D-
0k,
0g,
1\+
0%+
0!+
b1111 ~(
b1111 o*
b100 !)
b100 l*
1f)
0/)
0+)
b111 p(
b111 #)
b111 ))
b111 m*
b111 p*
b111 t*
b111 g.
b1100 q(
b1100 $)
b1100 *)
b1100 n*
b1100 q*
b1100 u*
b1100 ~*
b1100 f,
b1100 b.
b111 D(
b111 I(
b111 O(
b111 V(
b111 o(
b111 a.
b111 e.
b100 n(
b100 `.
b100 j.
b1000000010101000 r(
b1000000010101000 J.
b1000000010101000 P.
b100000 w(
b100000 W.
b100000 X.
b0 a(
b0 h(
b101010 `(
b101010 e(
b1100100001000000010101000 V.
b11 ].
b100 ^.
b100 h.
b100 i.
b10000000101010 s(
b10000000101010 K.
b10000000101010 d.
b10000000101010 f.
b10000000101010 c.
b100000 v(
b100000 T.
b100000 U.
b11001000010000000101010 L(
b11001000010000000101010 R(
b11001000010000000101010 S(
b11001000010000000101010 l(
b111 Q(
b1000000011001000 x(
b1000000011001000 Q.
b1000000011001000 S.
b100000 u(
b100000 M.
b100000 O.
b100000 R.
b11100 K(
b11100 Z(
b11100 y(
b11100 N.
b11100 Y.
1G(
#95
0G(
#100
b0 t(
b0 \.
b0 _.
1U(
1Y(
0W(
0X(
1b(
b1 c(
b1 f(
b1 i(
b0 F(
b0 M(
b0 P(
b0 ^(
b0 z(
b0 %)
b0 Z.
b100001 j(
b110 _(
b110 d(
b110 g(
b110 k(
b110 {(
b0 y*
1*.
1B,
b0 }(
b0 r*
b0 v*
b0 x*
0w*
0+.
0C,
1).
1A,
1%.
1=,
0&.
0>,
1$.
1<,
1y-
13,
0z-
04,
1x-
12,
1t-
1.,
0u-
0/,
1s-
1-,
1o-
1),
0p-
0*,
1n-
1(,
1j-
1$,
0k-
0%,
1i-
1#,
1e-
1}+
0f-
0~+
1d-
1|+
1`-
1x+
0a-
0y+
1_-
1w+
1[-
1s+
0\-
0t+
1Z-
1r+
1V-
1n+
0W-
0o+
1U-
1m+
1Q-
1i+
0R-
0j+
1P-
1h+
1L-
1d+
0M-
0e+
1K-
1c+
1B-
1Z+
0C-
0[+
1A-
1Y+
1=-
1U+
0>-
0V+
1<-
1T+
18-
1P+
09-
0Q+
17-
1O+
13-
1K+
04-
0L+
12-
1J+
1.-
1F+
0/-
0G+
1--
1E+
1)-
1A+
0*-
0B+
1(-
1@+
1$-
1<+
0%-
0=+
1#-
1;+
1},
17+
0~,
08+
1|,
16+
1x,
12+
0y,
03+
1w,
11+
1s,
1-+
0t,
0.+
1r,
1,+
1H.
1`,
0I.
0a,
1G.
1_,
1C.
1[,
0D.
0\,
1B.
1Z,
1>.
1V,
0?.
0W,
1=.
1U,
19.
1Q,
17,
1}-
0:.
0R,
1_+
1G-
18.
1P,
0`+
0H-
14.
1L,
1^+
1F-
05.
0M,
1(+
1n,
13.
1K,
1/.
1G,
0R*
1'+
1m,
00.
0H,
0P*
1#+
1i,
1..
1F,
0B*
0$+
0)+
0A*
0j,
0o,
b11111111111111111111111111111111 e,
1~-
b0 |(
b0 d,
0!.
b11111111111111111111111111111111 }*
18,
b0 s*
b0 |*
09,
0C*
b0 ()
0i)
03)
b0 ")
b0 ')
0.)
1"+
1&+
1]+
1h,
1l,
1E-
0{-
0D-
05,
0\+
0?*
0f)
b11111111111111111111111111111111 z*
b0 ~(
b0 o*
b0 !)
b0 l*
0g)
00)
0,)
b11111111111111111111111111111111 b,
b0 q(
b0 $)
b0 *)
b0 n*
b0 q*
b0 u*
b0 ~*
b0 f,
b0 b.
b0 n(
b0 `.
b0 j.
b100 r(
b100 J.
b100 P.
b0 p(
b0 #)
b0 ))
b0 m*
b0 p*
b0 t*
b0 g.
b101000 w(
b101000 W.
b101000 X.
b100 a(
b100 h(
b1 `(
b1 e(
b10000000000000000000000100 V.
b100 ].
b0 ^.
b0 h.
b0 i.
b1 s(
b1 K.
b1 d.
b1 f.
b1 c.
b0 D(
b0 I(
b0 O(
b0 V(
b0 o(
b0 a.
b0 e.
b101000 v(
b101000 T.
b101000 U.
b10000100000000000000000000001 L(
b10000100000000000000000000001 R(
b10000100000000000000000000001 S(
b10000100000000000000000000001 l(
b1000 Q(
b101000 x(
b101000 Q.
b101000 S.
b100100 u(
b100100 M.
b100100 O.
b100100 R.
b100000 K(
b100000 Z(
b100000 y(
b100000 N.
b100000 Y.
1G(
#105
0G(
#110
b111 _(
b111 d(
b111 g(
b111 k(
b111 {(
0Y(
b11111111111111111111111111111111 t(
b11111111111111111111111111111111 \.
b11111111111111111111111111111111 _.
0U(
1W(
1X(
0b(
b10 c(
b10 f(
b10 i(
b11111111111111111111111111111111 F(
b11111111111111111111111111111111 M(
b11111111111111111111111111111111 P(
b11111111111111111111111111111111 ^(
b11111111111111111111111111111111 z(
b11111111111111111111111111111111 %)
b11111111111111111111111111111111 Z.
b110000010 j(
b11111111111111111111111111111111 y*
0B,
b11111111111111111111111111111111 }(
b11111111111111111111111111111111 r*
b11111111111111111111111111111111 v*
b11111111111111111111111111111111 x*
1w*
0*.
1C,
1+.
0A,
0).
0=,
0%.
1>,
1&.
0<,
0$.
03,
0y-
14,
1z-
02,
0x-
0.,
0t-
1/,
1u-
0-,
0s-
0),
0o-
1*,
1p-
0(,
0n-
0$,
0j-
1%,
1k-
0#,
0i-
0}+
0e-
1~+
1f-
0|+
0d-
0x+
0`-
1y+
1a-
0w+
0_-
0s+
0[-
1t+
1\-
0r+
0Z-
0n+
0V-
1o+
1W-
0m+
0U-
0i+
0Q-
1j+
1R-
0h+
0P-
0d+
0L-
1e+
1M-
0c+
0K-
0Z+
0B-
1[+
1C-
0Y+
0A-
0U+
0=-
1V+
1>-
0T+
0<-
0P+
08-
1Q+
19-
0O+
07-
0K+
03-
1L+
14-
0J+
02-
0F+
0.-
1G+
1/-
0E+
0--
0A+
0)-
1B+
1*-
0@+
0(-
0<+
0$-
1=+
1%-
0;+
0#-
07+
0},
18+
1~,
06+
0|,
02+
0x,
13+
1y,
01+
0w,
0-+
0s,
1.+
1t,
0,+
0r,
0`,
0H.
1a,
1I.
0_,
0G.
0[,
0C.
1\,
1D.
0Z,
0B.
0V,
0>.
1W,
1?.
0U,
0=.
0Q,
09.
1R,
1:.
0P,
08.
0L,
04.
1M,
15.
0K,
03.
0G,
0/.
1C*
1H,
10.
1A*
0F,
0..
1i)
08,
0~-
19,
1!.
1h)
07,
0}-
12)
0_+
0G-
1m,
1'+
1`+
1H-
b11 e,
1i,
b11 }*
1#+
11)
0j)
1o,
b11111111111111111111111111111110 |(
b11111111111111111111111111111110 d,
0j,
1)+
b11111111111111111111111111111110 s*
b11111111111111111111111111111110 |*
0$+
b1000 ")
b1000 ')
03)
b111 ()
1-)
0"+
0]+
0h,
0E-
b11111111111111111111111111111010 z*
1g)
1,)
b11111111111111111111111111111010 b,
1k,
1g,
1%+
1!+
b111 ~(
b111 o*
b1 !)
b1 l*
1/)
1+)
b101 p(
b101 #)
b101 ))
b101 m*
b101 p*
b101 t*
b101 g.
b11 q(
b11 $)
b11 *)
b11 n*
b11 q*
b11 u*
b11 ~*
b11 f,
b11 b.
b101 D(
b101 I(
b101 O(
b101 V(
b101 o(
b101 a.
b101 e.
b100 n(
b100 `.
b100 j.
b1000000010101000 r(
b1000000010101000 J.
b1000000010101000 P.
b101100 w(
b101100 W.
b101100 X.
b0 a(
b0 h(
b101010 `(
b101010 e(
b11100010001000000010101000 V.
b111 ].
b10 ^.
b10 h.
b100 i.
b10000000101010 s(
b10000000101010 K.
b10000000101010 d.
b10000000101010 f.
b10000000101010 c.
b101100 v(
b101100 T.
b101100 U.
b111000100010000000101010 L(
b111000100010000000101010 R(
b111000100010000000101010 S(
b111000100010000000101010 l(
b1010 Q(
b1000000011010100 x(
b1000000011010100 Q.
b1000000011010100 S.
b101100 u(
b101100 M.
b101100 O.
b101100 R.
b101000 K(
b101000 Z(
b101000 y(
b101000 N.
b101000 Y.
1G(
#115
0G(
#120
b1010 t(
b1010 \.
b1010 _.
b1010 F(
b1010 M(
b1010 P(
b1010 ^(
b1010 z(
b1010 %)
b1010 Z.
b10 _(
b10 d(
b10 g(
b10 k(
b10 {(
1L*
1K*
1G*
1F*
1=*
1<*
18*
17*
13*
12*
1.*
1-*
1)*
1(*
1$*
1#*
1})
1|)
1x)
1w)
1s)
1r)
1n)
1m)
1d)
1c)
1_)
1^)
1Z)
1Y)
1U)
1T)
1P)
1O)
1K)
1J)
1F)
1E)
1A)
1@)
1<)
1;)
17)
16)
1j*
1i*
1e*
1d*
1`*
1_*
1[*
1Z*
1V*
1U*
1Q*
1^+
1F-
1}-
b11111111111111111111111111111111 y*
17,
1(+
0)+
1n,
0o,
1).
1$.
1x-
1s-
1n-
1i-
1d-
1_-
1Z-
1U-
1P-
1K-
1A-
1<-
17-
12-
1--
1(-
1#-
1|,
1w,
1r,
1B.
1G.
1=.
18.
13.
1..
1G-
b11111111111111111111111111111111 }(
b11111111111111111111111111111111 r*
b11111111111111111111111111111111 v*
b11111111111111111111111111111111 x*
1w*
1A,
1<,
12,
1-,
1(,
1#,
1|+
1w+
1r+
1m+
1h+
1c+
1Y+
1T+
1O+
1J+
1E+
1@+
1;+
16+
11+
1,+
1Z,
1_,
1U,
1P,
1K,
1F,
1_+
1P*
13)
1*.
1+.
1%.
1&.
1y-
1z-
1t-
1u-
1o-
1p-
1j-
1k-
1e-
1f-
1`-
1a-
1[-
1\-
1V-
1W-
1Q-
1R-
1L-
1M-
1B-
1C-
1=-
1>-
18-
19-
13-
14-
1.-
1/-
1)-
1*-
1$-
1%-
1},
1~,
1x,
1y,
1s,
1t,
1H.
1I.
1>.
1?.
1C.
1D.
19.
1:.
14.
15.
1/.
10.
b11111111111111111111111111111111 e,
1~-
0!.
b11111111111111111111111111110100 |(
b11111111111111111111111111110100 d,
1H-
1B,
1C,
1=,
1>,
13,
14,
1.,
1/,
1),
1*,
1$,
1%,
1}+
1~+
1x+
1y+
1s+
1t+
1n+
1o+
1i+
1j+
1d+
1e+
1Z+
1[+
1U+
1V+
1P+
1Q+
1K+
1L+
1F+
1G+
1A+
1B+
1<+
1=+
17+
18+
12+
13+
1-+
1.+
1`,
1a,
1V,
1W,
1[,
1\,
1Q,
1R,
1L,
1M,
1G,
1H,
b11111111111111111111111111111111 }*
18,
09,
b11111111111111111111111111110100 s*
b11111111111111111111111111110100 |*
1`+
0M*
0H*
0>*
09*
04*
0/*
0**
0%*
0~)
0y)
0t)
0o)
0e)
0`)
0[)
0V)
0Q)
0L)
0G)
0B)
0=)
08)
0k*
0a*
0f*
0\*
0W*
b1010 ")
b1010 ')
0R*
b11111111111111111111111111111111 ()
1B*
0&+
1]+
06,
0l,
1E-
0|-
b11111111111111111111111111110100 z*
1@*
0g)
10)
b11111111111111111111111111110100 b,
1'.
1".
1v-
1q-
1l-
1g-
1b-
1]-
1X-
1S-
1N-
1I-
1?-
1:-
15-
10-
1+-
1&-
1!-
1z,
1u,
1p,
1E.
1;.
1@.
16.
11.
1,.
1{-
1D-
1?,
1:,
10,
1+,
1&,
1!,
1z+
1u+
1p+
1k+
1f+
1a+
1W+
1R+
1M+
1H+
1C+
1>+
19+
14+
1/+
1*+
1],
1S,
1X,
1N,
1I,
1D,
15,
1\+
b11111111111111111111111111111111 ~(
b11111111111111111111111111111111 o*
b1011 !)
b1011 l*
1I*
1D*
1:*
15*
10*
1+*
1&*
1!*
1z)
1u)
1p)
1k)
1a)
1\)
1W)
1R)
1M)
1H)
1C)
1>)
19)
14)
1g*
1]*
1b*
1X*
1S*
1N*
1?*
1f)
b1011 p(
b1011 #)
b1011 ))
b1011 m*
b1011 p*
b1011 t*
b1011 g.
b11111111111111111111111111111111 q(
b11111111111111111111111111111111 $)
b11111111111111111111111111111111 *)
b11111111111111111111111111111111 n*
b11111111111111111111111111111111 q*
b11111111111111111111111111111111 u*
b11111111111111111111111111111111 ~*
b11111111111111111111111111111111 f,
b11111111111111111111111111111111 b.
b1011 D(
b1011 I(
b1011 O(
b1011 V(
b1011 o(
b1011 a.
b1011 e.
b111 n(
b111 `.
b111 j.
b1110000010000000 r(
b1110000010000000 J.
b1110000010000000 P.
b110000 w(
b110000 W.
b110000 X.
b100000 `(
b100000 e(
b10000101001110000010000000 V.
b100 ].
b101 ^.
b101 h.
b111 i.
b11100000100000 s(
b11100000100000 K.
b11100000100000 d.
b11100000100000 f.
b11100000100000 c.
b110000 v(
b110000 T.
b110000 U.
b100001010011100000100000 L(
b100001010011100000100000 R(
b100001010011100000100000 S(
b100001010011100000100000 l(
b1011 Q(
b1110000010110000 x(
b1110000010110000 Q.
b1110000010110000 S.
b110000 u(
b110000 M.
b110000 O.
b110000 R.
b101100 K(
b101100 Z(
b101100 y(
b101100 N.
b101100 Y.
1G(
#125
0G(
#130
b101 t(
b101 \.
b101 _.
b101 F(
b101 M(
b101 P(
b101 ^(
b101 z(
b101 %)
b101 Z.
b110 _(
b110 d(
b110 g(
b110 k(
b110 {(
0A*
0i)
0!.
09,
1j)
0m,
b0 y*
0'+
0K*
0F*
0<*
07*
02*
0-*
0(*
0#*
0|)
0w)
0r)
0m)
0c)
0^)
0Y)
0T)
0O)
0J)
0E)
0@)
0;)
06)
0d*
0i*
0_*
0Z*
0U*
0)+
0P*
0h)
0o,
1).
1$.
1x-
1s-
1n-
1i-
1d-
1_-
1Z-
1U-
1P-
1K-
1A-
1<-
17-
12-
1--
1(-
1#-
1|,
1w,
1r,
1B.
1G.
1=.
18.
13.
0}-
0i,
b0 }(
b0 r*
b0 v*
b0 x*
0w*
1A,
1<,
12,
1-,
1(,
1#,
1|+
1w+
1r+
1m+
1h+
1c+
1Y+
1T+
1O+
1J+
1E+
1@+
1;+
16+
11+
1,+
1Z,
1_,
1U,
1P,
1K,
07,
0#+
0L*
0G*
0=*
08*
03*
0.*
0)*
0$*
0})
0x)
0s)
0n)
0d)
0_)
0Z)
0U)
0P)
0K)
0F)
0A)
0<)
07)
0j*
0`*
0e*
0[*
0V*
0Q*
01)
0B*
1C*
02)
13)
1*.
0+.
1%.
0&.
1y-
0z-
1t-
0u-
1o-
0p-
1j-
0k-
1e-
0f-
1`-
0a-
1[-
0\-
1V-
0W-
1Q-
0R-
1L-
0M-
1B-
0C-
1=-
0>-
18-
09-
13-
04-
1.-
0/-
1)-
0*-
1$-
0%-
1},
0~,
1x,
0y,
1s,
0t,
1H.
0I.
1>.
0?.
1C.
0D.
19.
0:.
14.
05.
1/.
00.
b11111111111111111111111111111010 e,
0G-
1H-
b101 |(
b101 d,
1j,
1B,
0C,
1=,
0>,
13,
04,
1.,
0/,
1),
0*,
1$,
0%,
1}+
0~+
1x+
0y+
1s+
0t+
1n+
0o+
1i+
0j+
1d+
0e+
1Z+
0[+
1U+
0V+
1P+
0Q+
1K+
0L+
1F+
0G+
1A+
0B+
1<+
0=+
17+
08+
12+
03+
1-+
0.+
1`,
0a,
1V,
0W,
1[,
0\,
1Q,
0R,
1L,
0M,
1G,
0H,
b11111111111111111111111111111010 }*
0_+
1`+
b101 s*
b101 |*
1$+
0M*
0H*
0>*
09*
04*
0/*
0**
0%*
0~)
0y)
0t)
0o)
0e)
0`)
0[)
0V)
0Q)
0L)
0G)
0B)
0=)
08)
0k*
0a*
0f*
0\*
0W*
0R*
b0 ()
0-)
b1111 ")
b1111 ')
1.)
1&+
0]+
16,
1l,
0E-
1|-
b11111111111111111111111111111010 z*
0@*
1g)
00)
b11111111111111111111111111111010 b,
0'.
0".
0v-
0q-
0l-
0g-
0b-
0]-
0X-
0S-
0N-
0I-
0?-
0:-
05-
00-
0+-
0&-
0!-
0z,
0u,
0p,
0E.
0;.
0@.
06.
01.
0,.
0D-
0g,
0?,
0:,
00,
0+,
0&,
0!,
0z+
0u+
0p+
0k+
0f+
0a+
0W+
0R+
0M+
0H+
0C+
0>+
09+
04+
0/+
0*+
0],
0S,
0X,
0N,
0I,
0D,
0\+
0!+
b1111 ~(
b1111 o*
b0 !)
b0 l*
0I*
0D*
0:*
05*
00*
0+*
0&*
0!*
0z)
0u)
0p)
0k)
0a)
0\)
0W)
0R)
0M)
0H)
0C)
0>)
09)
04)
0g*
0]*
0b*
0X*
0S*
0N*
0f)
0+)
b101 p(
b101 #)
b101 ))
b101 m*
b101 p*
b101 t*
b101 g.
b1010 q(
b1010 $)
b1010 *)
b1010 n*
b1010 q*
b1010 u*
b1010 ~*
b1010 f,
b1010 b.
b101 D(
b101 I(
b101 O(
b101 V(
b101 o(
b101 a.
b101 e.
b1110000010001000 r(
b1110000010001000 J.
b1110000010001000 P.
b110100 w(
b110100 W.
b110100 X.
b100010 `(
b100010 e(
b11100010001110000010001000 V.
b111 ].
b10 ^.
b10 h.
b11100000100010 s(
b11100000100010 K.
b11100000100010 d.
b11100000100010 f.
b11100000100010 c.
b110100 v(
b110100 T.
b110100 U.
b111000100011100000100010 L(
b111000100011100000100010 R(
b111000100011100000100010 S(
b111000100011100000100010 l(
b1100 Q(
b1110000010111100 x(
b1110000010111100 Q.
b1110000010111100 S.
b110100 u(
b110100 M.
b110100 O.
b110100 R.
b110000 K(
b110000 Z(
b110000 y(
b110000 N.
b110000 Y.
1G(
#135
0G(
#140
1\*
1"+
0O,
1h,
07.
b11111111111111111111111110111011 z*
1Y*
0,)
b11111111111111111111111110111011 b,
b1000100 p(
b1000100 #)
b1000100 ))
b1000100 m*
b1000100 p*
b1000100 t*
b1000100 g.
b1010000 t(
b1010000 \.
b1010000 _.
0W(
0X(
1](
1E(
b0 c(
b0 f(
b0 i(
b1010000 F(
b1010000 M(
b1010000 P(
b1010000 ^(
b1010000 z(
b1010000 %)
b1010000 Z.
b1010000 j(
b10 _(
b10 d(
b10 g(
b10 k(
b10 {(
b11111111111111111111111111111111 y*
0*.
0B,
b11111111111111111111111111111111 }(
b11111111111111111111111111111111 r*
b11111111111111111111111111111111 v*
b11111111111111111111111111111111 x*
1w*
1+.
1C,
0).
0A,
0%.
0=,
1&.
1>,
0$.
0<,
0y-
03,
1z-
14,
0x-
02,
0t-
0.,
1u-
1/,
0s-
0-,
0o-
0),
1p-
1*,
0n-
0(,
0j-
0$,
1k-
1%,
0i-
0#,
0e-
0}+
1f-
1~+
0d-
0|+
0`-
0x+
1a-
1y+
0_-
0w+
0[-
0s+
1\-
1t+
0Z-
0r+
0V-
0n+
1W-
1o+
0U-
0m+
0Q-
0i+
1R-
1j+
0P-
0h+
0L-
0d+
1M-
1e+
0K-
0c+
0B-
0Z+
1C-
1[+
0A-
0Y+
0=-
0U+
1>-
1V+
0<-
0T+
08-
0P+
19-
1Q+
07-
0O+
03-
0K+
14-
1L+
02-
0J+
0.-
0F+
1/-
1G+
0--
0E+
0)-
0A+
1*-
1B+
0(-
0@+
0$-
0<+
1%-
1=+
0#-
0;+
0},
07+
1~,
18+
0|,
06+
0x,
02+
1y,
13+
0w,
01+
0s,
0-+
1t,
1.+
0r,
0,+
0H.
0`,
1I.
1a,
0G.
0_,
0C.
0[,
1D.
1\,
0B.
0Z,
0>.
0V,
1?.
1W,
0=.
0U,
09.
0Q,
1:.
1R,
18.
1P,
14.
1L,
05.
0M,
1R*
13.
1K,
1P*
1/.
1G,
1B*
00.
1}-
1m,
0H,
17,
1'+
1..
1G-
1F-
1i,
1F,
1_+
1^+
1#+
1A*
01)
1~-
1!.
0H-
b111111 e,
1n,
0o,
b11111111111111111111111111001000 |(
b11111111111111111111111111001000 d,
0j,
18,
19,
0`+
b111111 }*
1(+
0)+
b11111111111111111111111111001000 s*
b11111111111111111111111111001000 |*
0$+
0C*
1i)
0j)
03)
b1100 ()
0-)
b1010000 ")
b1010000 ')
0.)
b111 n(
b111 `.
b111 j.
b100010000 r(
b100010000 J.
b100010000 P.
1{-
1D-
0k,
0g,
15,
1\+
0%+
0!+
b1001100 ~(
b1001100 o*
b100 !)
b100 l*
1?*
1f)
0/)
0+)
b111000 w(
b111000 W.
b111000 X.
b101011 a(
b101011 h(
b100 `(
b100 e(
b1100111000000000100010000 V.
b11 ].
b111 ^.
b111 h.
b0 i.
b1000100 s(
b1000100 K.
b1000100 d.
b1000100 f.
b1000100 c.
b1100 q(
b1100 $)
b1100 *)
b1100 n*
b1100 q*
b1100 u*
b1100 ~*
b1100 f,
b1100 b.
b111000 v(
b111000 T.
b111000 U.
b10101100011001110000000001000100 L(
b10101100011001110000000001000100 R(
b10101100011001110000000001000100 S(
b10101100011001110000000001000100 l(
b1101 Q(
b101001000 x(
b101001000 Q.
b101001000 S.
b111000 u(
b111000 M.
b111000 O.
b111000 R.
b110100 K(
b110100 Z(
b110100 y(
b110100 N.
b110100 Y.
1G(
#145
0G(
#150
b101 t(
b101 \.
b101 _.
1W(
0E(
1[(
b1010000 F(
b1010000 M(
b1010000 P(
b1010000 ^(
b1010000 z(
b1010000 %)
b1010000 Z.
b101001000 j(
0R,
0:.
0P,
08.
0L,
04.
1M,
15.
0K,
0W*
03.
0P*
0G,
0U*
0/.
1..
1F,
0B*
1H,
0Q*
0A*
10.
b1111 e,
1~-
b11111111111111111111111110110000 |(
b11111111111111111111111110110000 d,
0!.
b1111 }*
18,
b11111111111111111111111110110000 s*
b11111111111111111111111110110000 |*
09,
0C*
b1010000 ")
b1010000 ')
1R*
b0 ()
0i)
1]+
0E,
1E-
0-.
0{-
0D-
05,
0\+
0?*
0f)
b11111111111111111111111110101111 z*
b1010000 ~(
b1010000 o*
b0 !)
b0 l*
1O*
0g)
b11111111111111111111111110101111 b,
b0 q(
b0 $)
b0 *)
b0 n*
b0 q*
b0 u*
b0 ~*
b0 f,
b0 b.
b10 n(
b10 `.
b10 j.
b1010000 p(
b1010000 #)
b1010000 ))
b1010000 m*
b1010000 p*
b1010000 t*
b1010000 g.
b101000000 r(
b101000000 J.
b101000000 P.
b111100 w(
b111100 W.
b111100 X.
b100011 a(
b100011 h(
b10000 `(
b10000 e(
b10000000000101000000 V.
b0 ].
b10 ^.
b10 h.
b1010000 s(
b1010000 K.
b1010000 d.
b1010000 f.
b1010000 c.
b111100 v(
b111100 T.
b111100 U.
b10001100000000100000000001010000 L(
b10001100000000100000000001010000 R(
b10001100000000100000000001010000 S(
b10001100000000100000000001010000 l(
b1110 Q(
b101 J(
b101 N(
b101 T(
b101 m(
b101 [.
b101111100 x(
b101111100 Q.
b101111100 S.
b111100 u(
b111100 M.
b111100 O.
b111100 R.
b111000 K(
b111000 Z(
b111000 y(
b111000 N.
b111000 Y.
1G(
#155
0G(
#160
1U(
b0 y*
1B,
b0 }(
b0 r*
b0 v*
b0 x*
0w*
1*.
0C,
0+.
1A,
1).
1=,
1%.
0>,
0&.
1<,
1$.
13,
1y-
04,
0z-
12,
1x-
1.,
1t-
0/,
0u-
1-,
1s-
1),
1o-
0*,
0p-
1(,
1n-
1$,
1j-
0%,
0k-
1#,
1i-
1}+
1e-
0~+
0f-
1|+
1d-
1x+
1`-
0y+
0a-
1w+
1_-
1s+
1[-
0t+
0\-
1r+
1Z-
1n+
1V-
0o+
0W-
1m+
1U-
1i+
1Q-
0j+
0R-
1h+
1P-
1d+
1L-
0e+
0M-
1c+
1K-
1Z+
1B-
0[+
0C-
1Y+
1A-
1U+
1=-
0V+
0>-
1T+
1<-
1P+
18-
0Q+
09-
1O+
17-
1K+
13-
0L+
04-
1J+
12-
1F+
1.-
0G+
0/-
1E+
1--
1A+
1)-
0B+
0*-
1@+
1(-
1<+
1$-
0=+
0%-
1;+
1#-
17+
1},
08+
0~,
16+
1|,
12+
1x,
03+
0y,
11+
1w,
1-+
1s,
0.+
0t,
1,+
1r,
1`,
1H.
0a,
0I.
1_,
1G.
1[,
1C.
0\,
0D.
1Z,
1B.
1V,
1>.
0W,
0?.
1U,
1=.
1Q,
19.
1P,
18.
1L,
14.
0M,
05.
1K,
13.
1G,
1/.
0R*
1E,
1-.
0O*
b0 t(
b0 \.
b0 _.
bx J(
bx N(
bx T(
bx m(
bx [.
0W(
0](
0[(
1\(
b0 F(
b0 M(
b0 P(
b0 ^(
b0 z(
b0 %)
b0 Z.
b100 j(
0H,
00.
1F,
1..
18,
1~-
09,
0!.
17,
1}-
1_+
1G-
0`+
0H-
1^+
1F-
1(+
1n,
0)+
0o,
1'+
1m,
b11111111111111111111111111111111 }*
1#+
b11111111111111111111111111111111 e,
1i,
0$+
b0 s*
b0 |*
0R,
0j,
b0 |(
b0 d,
0:.
0\*
b0 ")
b0 ')
0.)
1"+
1O,
1h,
17.
b11111111111111111111111111111111 z*
b0 ~(
b0 o*
0Y*
0,)
b11111111111111111111111111111111 b,
b0 D(
b0 I(
b0 O(
b0 V(
b0 o(
b0 a.
b0 e.
b0 n(
b0 `.
b0 j.
b0 p(
b0 #)
b0 ))
b0 m*
b0 p*
b0 t*
b0 g.
b1000100 r(
b1000100 J.
b1000100 P.
b1000100 w(
b1000100 W.
b1000100 X.
b10 a(
b10 h(
b10001 `(
b10001 e(
b1000100 V.
b0 ^.
b0 h.
b10001 s(
b10001 K.
b10001 d.
b10001 f.
b10001 c.
b1000000 v(
b1000000 T.
b1000000 U.
b1000000000000000000000010001 L(
b1000000000000000000000010001 R(
b1000000000000000000000010001 S(
b1000000000000000000000010001 l(
b1111 Q(
b10000100 x(
b10000100 Q.
b10000100 S.
b1000000 u(
b1000000 M.
b1000000 O.
b1000000 R.
b111100 K(
b111100 Z(
b111100 y(
b111100 N.
b111100 Y.
1G(
#165
0G(
#170
1\*
1R*
0E,
0O,
0-.
07.
1Y*
1O*
b1010100 t(
b1010100 \.
b1010100 _.
0U(
1](
1E(
0\(
b1010100 F(
b1010100 M(
b1010100 P(
b1010100 ^(
b1010100 z(
b1010100 %)
b1010100 Z.
b1010000 j(
b11111111111111111111111111111111 y*
0B,
b11111111111111111111111111111111 }(
b11111111111111111111111111111111 r*
b11111111111111111111111111111111 v*
b11111111111111111111111111111111 x*
1w*
0*.
1C,
1+.
0A,
0).
0=,
0%.
1>,
1&.
0<,
0$.
03,
0y-
14,
1z-
02,
0x-
0.,
0t-
1/,
1u-
0-,
0s-
0),
0o-
1*,
1p-
0(,
0n-
0$,
0j-
1%,
1k-
0#,
0i-
0}+
0e-
1~+
1f-
0|+
0d-
0x+
0`-
1y+
1a-
0w+
0_-
0s+
0[-
1t+
1\-
0r+
0Z-
0n+
0V-
1o+
1W-
0m+
0U-
0i+
0Q-
1j+
1R-
0h+
0P-
0d+
0L-
1e+
1M-
0c+
0K-
0Z+
0B-
1[+
1C-
0Y+
0A-
0U+
0=-
1V+
1>-
0T+
0<-
0P+
08-
1Q+
19-
0O+
07-
0K+
03-
1L+
14-
0J+
02-
0F+
0.-
1G+
1/-
0E+
0--
0A+
0)-
1B+
1*-
0@+
0(-
0<+
0$-
1=+
1%-
0;+
0#-
07+
0},
18+
1~,
06+
0|,
02+
0x,
13+
1y,
01+
0w,
0-+
0s,
1.+
1t,
0,+
0r,
0`,
0H.
1a,
1I.
0_,
0G.
0[,
0C.
1\,
1D.
0Z,
0B.
0V,
0>.
1W,
1?.
0U,
0=.
0Q,
09.
0R,
0:.
0P,
08.
0L,
04.
1M,
15.
0K,
03.
0G,
0/.
0H,
00.
1^+
0F,
1F-
0..
1(+
08,
1n,
0~-
0)+
19,
0o,
1!.
1'+
07,
1m,
0}-
1#+
b11 }*
0_+
1i,
b11 e,
0G-
0$+
b11111111111111111111111110101100 s*
b11111111111111111111111110101100 |*
1`+
0j,
b11111111111111111111111110101100 |(
b11111111111111111111111110101100 d,
1H-
1j)
b1010100 ")
b1010100 ')
0.)
1"+
0]+
1h,
0E-
b11111111111111111111111110101011 z*
b1010100 ~(
b1010100 o*
1g)
0,)
b11111111111111111111111110101011 b,
b1010100 p(
b1010100 #)
b1010100 ))
b1010100 m*
b1010100 p*
b1010100 t*
b1010100 g.
b1001000 w(
b1001000 W.
b1001000 X.
b101 D(
b101 I(
b101 O(
b101 V(
b101 o(
b101 a.
b101 e.
b10 n(
b10 `.
b10 j.
b101010000 r(
b101010000 J.
b101010000 P.
b101011 a(
b101011 h(
b10100 `(
b10100 e(
b10000000000101010000 V.
b10 ^.
b10 h.
b1010100 s(
b1010100 K.
b1010100 d.
b1010100 f.
b1010100 c.
b1001000 v(
b1001000 T.
b1001000 U.
b10101100000000100000000001010100 L(
b10101100000000100000000001010100 R(
b10101100000000100000000001010100 S(
b10101100000000100000000001010100 l(
b10001 Q(
b110011000 x(
b110011000 Q.
b110011000 S.
b1001000 u(
b1001000 M.
b1001000 O.
b1001000 R.
b1000100 K(
b1000100 Z(
b1000100 y(
b1000100 N.
b1000100 Y.
1G(
#175
