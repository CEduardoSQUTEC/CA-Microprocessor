module datapath(input          clk, reset,
                input          pcen, irwrite, regwrite,
                input          alusrca, iord, memtoreg, regdst,
                input   [1:0]  alusrcb, pcsrc,
                input   [2:0]  alucontrol,
                output  [5:0]  op, funct,
                output         zero,
                output  [31:0] adr,
                output  reg [31:0]writedata,
                input   [31:0] readdata);

//----------------  Wire-Reg box -----------------------
                wire [4:0]  writereg;
                wire [31:0] pcnext;
                reg  [31:0]  pc;
                reg  [31:0] instr, data;
                wire [31:0] srca, srcb;
                reg  [31:0] a;
                wire [31:0] aluresult;
                reg  [31:0] aluout;
                wire [31:0] signimm;
                wire [31:0] signimmsh;
                wire [31:0] wd3, rd1, rd2;
//---------------------------------------------------

  // Setting codes for control unit
  assign op = instr[31:26];
  assign funct = instr[5:0];


  //"Activate" program when reset is asserted
  always @ (*) begin
   if (reset) pc <= 0;
  end


  //Setting Instr and Data. Always on posedge
  always @ (posedge clk) begin
   if(irwrite)  instr <=  readdata;
   data <= readdata;
  end


  //Saving operands from register
  always @ (posedge clk) begin
    a <= rd1;
    writedata <= rd2;
  end


  //Saving ALU output
  always @ (posedge clk) begin
    aluout <= aluresult;
  end


  //Going to next instruction
   always @ (posedge clk)begin
     if(pcen) pc <= pcnext;
   end


 //Regfile logic
  regfile     rf(clk, regwrite, instr[25:21], instr[20:16], writereg, wd3, rd1, rd2);

  mux2 #(5)  RegDstMux(instr[20:16], instr[15:11], regdst, writereg);

  mux2 #(32) WD3Mux(aluout, data, memtoreg, wd3);

  //Adjusting some wires
  signext    se(instr[15:0], signimm);

  sl2        inmsl2(signimm, signimmsh);


  //ALU Logic
  mux2 #(32) SrcAmux(pc,a,alusrca,srca);

  mux4 #(32) SrcBmux(writedata, 32'b100, signimm, signimmsh, alusrcb, srcb);

  alu        alu(srca,srcb,alucontrol,aluresult,zero);


  //NextPC Logic
  mux3 #(32) Nextmux(aluresult, aluout, { pc[31:28], {instr[25:0], 2'b00} }, pcsrc, pcnext);

  mux2 #(32) PCadrMux(pc,aluout,iord,adr);


endmodule